<haxe>
	<class path="Array" params="T" file="Z:\3Work\Haxe-2.10\Haxe/std/js/_std/Array.hx" extern="1">
		<iterator public="1" get="inline" set="null" line="56">
			<f a=""><t path="Iterator"><c path="Array.T"/></t></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<copy public="1" get="inline" set="null" line="52">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>Returns a copy of the Array. The values are not
		copied, only the Array structure.</haxe_doc>
		</copy>
		<remove public="1" get="inline" set="null" line="48">
			<f a="x">
				<c path="Array.T"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurence of [x].
		Returns false if [x] was not present.
		Elements are compared by using standard equality.</haxe_doc>
		</remove>
		<insert public="1" get="inline" set="null" line="44">
			<f a="pos:x">
				<c path="Int"/>
				<c path="Array.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Inserts the element [x] at the position [pos].
		All elements after [pos] are moved one index ahead.</haxe_doc>
		</insert>
		<unshift public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Adds the element [x] at the start of the array.</haxe_doc>
		</unshift>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a displayable representation of the Array content.</haxe_doc>
		</toString>
		<splice public="1" set="method">
			<f a="pos:len">
				<c path="Int"/>
				<c path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Removes [len] elements starting from [pos] an returns them.</haxe_doc>
		</splice>
		<sort public="1" set="method">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<c path="Int"/>
				</f>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sort the Array according to the comparison function [f].
		[f(x,y)] should return [0] if [x == y], [>0] if [x > y]
		and [<0] if [x < y].]]></haxe_doc>
		</sort>
		<slice public="1" set="method">
			<f a="pos:?end">
				<c path="Int"/>
				<c path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Copies the range of the array starting at [pos] up to,
		but not including, [end]. Both [pos] and [end] can be
		negative to count from the end: -1 is the last item in
		the array.</haxe_doc>
		</slice>
		<shift public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>Removes the first element and returns it.</haxe_doc>
		</shift>
		<reverse public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc>Reverse the order of elements of the Array.</haxe_doc>
		</reverse>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<c path="Int"/>
			</f>
			<haxe_doc>Adds the element [x] at the end of the array.</haxe_doc>
		</push>
		<pop public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>Removes the last element of the array and returns it.</haxe_doc>
		</pop>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a representation of an array with [sep] for separating each element.</haxe_doc>
		</join>
		<concat public="1" set="method">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns a new Array by appending [a] to [this].</haxe_doc>
		</concat>
		<length public="1" set="null">
			<c path="Int"/>
			<haxe_doc>The length of the Array</haxe_doc>
		</length>
		<new public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<haxe_doc>An Array is a storage for values. You can access it using indexes or
	with its API. On the server side, it's often better to use a [List] which
	is less memory and CPU consuming, unless you really need indexed access.</haxe_doc>
		<meta><m n=":core_api"/></meta>
	</class>
	<class path="Class" params="T" file="Z:\3Work\Haxe-2.10\Haxe/std/Class.hx" extern="1"><haxe_doc>An abstract type that represents a Class.
	See [Type] for the haXe Reflection API.</haxe_doc></class>
	<class path="Date" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/js/_std/Date.hx" extern="1">
		<now public="1" get="inline" set="null" line="42" static="1">
			<f a=""><c path="Date"/></f>
			<haxe_doc>Returns a Date representing the current local time.</haxe_doc>
		</now>
		<fromTime public="1" get="inline" set="null" line="46" static="1">
			<f a="t">
				<c path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a Date from a timestamp [t] which is the number of
		milliseconds elapsed since 1st January 1970.</haxe_doc>
		</fromTime>
		<fromString public="1" get="inline" set="null" line="52" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a Date from a formated string of one of the following formats :
		[YYYY-MM-DD hh:mm:ss] or [YYYY-MM-DD] or [hh:mm:ss]. The first two formats
		are expressed in local time, the third in UTC Epoch.</haxe_doc>
		</fromString>
		<toString public="1" get="inline" set="null" line="38">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation for the Date, by using the
		standard format [YYYY-MM-DD HH:MM:SS]. See [DateTools.format] for
		other formating rules.</haxe_doc>
		</toString>
		<getDay public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>Returns the week day of the date (0-6 range).</haxe_doc>
		</getDay>
		<getDate public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>Returns the day of the date (1-31 range).</haxe_doc>
		</getDate>
		<getMonth public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>Returns the month of the date (0-11 range).</haxe_doc>
		</getMonth>
		<getFullYear public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>Returns the full year of the date.</haxe_doc>
		</getFullYear>
		<getSeconds public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>Returns the seconds of the date (0-59 range).</haxe_doc>
		</getSeconds>
		<getMinutes public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>Returns the minutes value of the date (0-59 range).</haxe_doc>
		</getMinutes>
		<getHours public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>Returns the hours value of the date (0-23 range).</haxe_doc>
		</getHours>
		<getTime public="1" set="method">
			<f a=""><c path="Float"/></f>
			<haxe_doc>Returns the timestamp of the date. It's the number of milliseconds
		elapsed since 1st January 1970. It might only have a per-second precision
		depending on the platforms.</haxe_doc>
		</getTime>
		<new public="1" set="method">
			<f a="year:month:day:hour:min:sec">
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Creates a new date object.</haxe_doc>
		</new>
		<haxe_doc>The Date class is used for date manipulation. There is some extra functions
	available in the [DateTools] class.</haxe_doc>
		<meta><m n=":core_api"/></meta>
	</class>
	<class path="EReg" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/js/_std/EReg.hx">
		<customReplace public="1" set="method" line="72">
			<f a="s:f">
				<c path="String"/>
				<f a="">
					<c path="EReg"/>
					<c path="String"/>
				</f>
				<c path="String"/>
			</f>
			<haxe_doc>For each occurence of the pattern in the string [s], the function [f] is called and
		can return the string that needs to be replaced. All occurences are matched anyway,
		and setting the [g] flag might cause some incorrect behavior on some platforms.</haxe_doc>
		</customReplace>
		<replace public="1" set="method" line="68">
			<f a="s:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Replaces a pattern by another string. The [by] format can
		contains [$1] to [$9] that will correspond to groups matched
		while replacing. [$$] means the [$] character.</haxe_doc>
		</replace>
		<split public="1" set="method" line="62">
			<f a="s">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Split a string by using the regular expression to match
		the separators.</haxe_doc>
		</split>
		<matchedPos public="1" set="method" line="57">
			<f a=""><a>
	<pos><c path="Int"/></pos>
	<len><c path="Int"/></len>
</a></f>
			<haxe_doc>Returns the position of the matched substring within the
		original matched string.</haxe_doc>
		</matchedPos>
		<matchedRight public="1" set="method" line="51">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the part of the string that was at the right of
		of the matched substring.</haxe_doc>
		</matchedRight>
		<matchedLeft public="1" set="method" line="46">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the part of the string that was as the left of
		of the matched substring.</haxe_doc>
		</matchedLeft>
		<matched public="1" set="method" line="42">
			<f a="n">
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a matched group or throw an expection if there
		is no such group. If [n = 0], the whole matched substring
		is returned.</haxe_doc>
		</matched>
		<match public="1" set="method" line="35">
			<f a="s">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>Tells if the regular expression matches the String.
		Updates the internal state accordingly.</haxe_doc>
		</match>
		<r><d/></r>
		<new public="1" set="method" line="30">
			<f a="r:opt">
				<c path="String"/>
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Creates a new regular expression with pattern [r] and
		options [opt].</haxe_doc>
		</new>
		<haxe_doc>Regular expressions are a way to find regular patterns into
	Strings. Have a look at the tutorial on haXe website to learn
	how to use them.</haxe_doc>
		<meta><m n=":core_api"/></meta>
	</class>
	<class path="Enum" params="T" file="Z:\3Work\Haxe-2.10\Haxe/std/Enum.hx" extern="1"><haxe_doc>An abstract type that represents an Enum.
	See [Type] for the haXe Reflection API.</haxe_doc></class>
	<class path="EnumValue" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/EnumValue.hx" extern="1"><haxe_doc>An abstract type that represents any enum value.
	See [Type] for the haXe Reflection API.</haxe_doc></class>
	<class path="Hash" params="T" file="Z:\3Work\Haxe-2.10\Haxe/std/js/_std/Hash.hx">
		<toString public="1" set="method" line="73">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns an displayable representation of the hashtable content.</haxe_doc>
		</toString>
		<iterator public="1" set="method" line="64">
			<f a=""><t path="Iterator"><c path="Hash.T"/></t></f>
			<haxe_doc>Returns an iterator of all values in the hashtable.</haxe_doc>
		</iterator>
		<keys public="1" set="method" line="53">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>Returns an iterator of all keys in the hashtable.</haxe_doc>
		</keys>
		<remove public="1" set="method" line="46">
			<f a="key">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>Removes a hashtable entry. Returns [true] if
		there was such entry.</haxe_doc>
		</remove>
		<exists public="1" set="method" line="42">
			<f a="key">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>Tells if a value exists for the given key.
		In particular, it's useful to tells if a key has
		a [null] value versus no value.</haxe_doc>
		</exists>
		<get public="1" set="method" line="38">
			<f a="key">
				<c path="String"/>
				<t path="Null"><c path="Hash.T"/></t>
			</f>
			<haxe_doc>Get a value for the given key.</haxe_doc>
		</get>
		<set public="1" set="method" line="34">
			<f a="key:value">
				<c path="String"/>
				<c path="Hash.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Set a value for the given key.</haxe_doc>
		</set>
		<h><d/></h>
		<new public="1" set="method" line="30">
			<f a=""><e path="Void"/></f>
			<haxe_doc>Creates a new empty hashtable.</haxe_doc>
		</new>
		<haxe_doc>Hashtable over a set of elements, using [String] as keys.
	Other kind of keys are not possible on all platforms since they
	can't always be implemented efficiently.</haxe_doc>
		<meta><m n=":core_api"/></meta>
	</class>
	<class path="IntIter" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/IntIter.hx">
		<next public="1" set="method" line="53">
			<f a=""><c path="Int"/></f>
			<haxe_doc>Moves to the next item of the iterator.</haxe_doc>
		</next>
		<hasNext public="1" set="method" line="46">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>Returns true if the iterator has other items, false otherwise.</haxe_doc>
		</hasNext>
		<max><c path="Int"/></max>
		<min><c path="Int"/></min>
		<new public="1" set="method" line="38">
			<f a="min:max">
				<c path="Int"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[Iterate from [min] (inclusive) to [max] (exclusive).
		If [max <= min], the iterator will not act as a countdown.]]></haxe_doc>
		</new>
		<haxe_doc>Integer iterator. Used for interval implementation.</haxe_doc>
	</class>
	<class path="Lambda" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/Lambda.hx">
		<array public="1" params="A" set="method" line="35" static="1">
			<f a="it">
				<t path="Iterable"><c path="array.A"/></t>
				<c path="Array"><c path="array.A"/></c>
			</f>
			<haxe_doc>Creates an [Array] from an [Iterable]</haxe_doc>
		</array>
		<list public="1" params="A" set="method" line="45" static="1">
			<f a="it">
				<t path="Iterable"><c path="list.A"/></t>
				<c path="List"><c path="list.A"/></c>
			</f>
			<haxe_doc>Creates a [List] from an [Iterable]</haxe_doc>
		</list>
		<map public="1" params="A:B" set="method" line="56" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="map.A"/></t>
				<f a="">
					<c path="map.A"/>
					<c path="map.B"/>
				</f>
				<c path="List"><c path="map.B"/></c>
			</f>
			<haxe_doc>Creates a new [Iterable] by appling the function 'f' to all
		elements of the iterator 'it'.</haxe_doc>
		</map>
		<mapi public="1" params="A:B" set="method" line="66" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="mapi.A"/></t>
				<f a=":">
					<c path="Int"/>
					<c path="mapi.A"/>
					<c path="mapi.B"/>
				</f>
				<c path="List"><c path="mapi.B"/></c>
			</f>
			<haxe_doc>Similar to [map], but also pass an index for each item iterated.</haxe_doc>
		</mapi>
		<has public="1" params="A" set="method" line="81" static="1">
			<f a="it:elt:?cmp">
				<t path="Iterable"><c path="has.A"/></t>
				<c path="has.A"/>
				<f a=":">
					<c path="has.A"/>
					<c path="has.A"/>
					<e path="Bool"/>
				</f>
				<e path="Bool"/>
			</f>
			<haxe_doc>Tells if the element is part of an iterable. The comparison
		is made using the [==] operator. Optionally you can pass as
		a third parameter a function that performs the comparison.
		That function must take as arguments the two items to
		compare and returns a boolean value.</haxe_doc>
		</has>
		<exists public="1" params="A" set="method" line="97" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="exists.A"/></t>
				<f a="">
					<c path="exists.A"/>
					<e path="Bool"/>
				</f>
				<e path="Bool"/>
			</f>
			<haxe_doc>Tells if at least one element of the iterable is found by using the specific function.</haxe_doc>
		</exists>
		<foreach public="1" params="A" set="method" line="107" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="foreach.A"/></t>
				<f a="">
					<c path="foreach.A"/>
					<e path="Bool"/>
				</f>
				<e path="Bool"/>
			</f>
			<haxe_doc>Tells if all elements of the iterable have the specified property defined by [f].</haxe_doc>
		</foreach>
		<iter public="1" params="A" set="method" line="117" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="iter.A"/></t>
				<f a="">
					<c path="iter.A"/>
					<e path="Void"/>
				</f>
				<e path="Void"/>
			</f>
			<haxe_doc>Call the function 'f' on all elements of the [Iterable] 'it'.</haxe_doc>
		</iter>
		<filter public="1" params="A" set="method" line="125" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="filter.A"/></t>
				<f a="">
					<c path="filter.A"/>
					<e path="Bool"/>
				</f>
				<c path="List"><c path="filter.A"/></c>
			</f>
			<haxe_doc>Return the list of elements matching the function 'f'</haxe_doc>
		</filter>
		<fold public="1" params="A:B" set="method" line="136" static="1">
			<f a="it:f:first">
				<t path="Iterable"><c path="fold.A"/></t>
				<f a=":">
					<c path="fold.A"/>
					<c path="fold.B"/>
					<c path="fold.B"/>
				</f>
				<c path="fold.B"/>
				<c path="fold.B"/>
			</f>
			<haxe_doc>Functional 'fold' using an [Iterable]</haxe_doc>
		</fold>
		<count public="1" params="A" set="method" line="145" static="1">
			<f a="it:?pred">
				<t path="Iterable"><c path="count.A"/></t>
				<f a="">
					<c path="count.A"/>
					<e path="Bool"/>
				</f>
				<c path="Int"/>
			</f>
			<haxe_doc>Count the number of elements in an [Iterable] having [pred] returning true.</haxe_doc>
		</count>
		<empty public="1" set="method" line="160" static="1">
			<f a="it">
				<t path="Iterable"><d/></t>
				<e path="Bool"/>
			</f>
			<haxe_doc>Tells if an iterable does not contain any element.</haxe_doc>
		</empty>
		<indexOf public="1" params="T" set="method" line="168" static="1">
			<f a="it:v">
				<t path="Iterable"><c path="indexOf.T"/></t>
				<c path="indexOf.T"/>
				<c path="Int"/>
			</f>
			<haxe_doc>Returns the index of the item in the given Iterable, depending on the order of the Iterator.
		Returns -1 if the item was not found.</haxe_doc>
		</indexOf>
		<concat public="1" params="T" set="method" line="181" static="1">
			<f a="a:b">
				<t path="Iterable"><c path="concat.T"/></t>
				<t path="Iterable"><c path="concat.T"/></t>
				<c path="List"><c path="concat.T"/></c>
			</f>
			<haxe_doc>Returns a list containing all items of 'a' followed by all items of 'b'</haxe_doc>
		</concat>
		<haxe_doc>The [Lambda] class is a collection of functional methods in order to
	use functional-style programming with haXe.</haxe_doc>
	</class>
	<class path="List" params="T" file="Z:\3Work\Haxe-2.10\Haxe/std/List.hx">
		<map public="1" params="X" set="method" line="246">
			<f a="f">
				<f a="">
					<c path="List.T"/>
					<c path="map.X"/>
				</f>
				<c path="List"><c path="map.X"/></c>
			</f>
			<haxe_doc>Returns a new list where all elements have been converted
		by the function [f].</haxe_doc>
		</map>
		<filter public="1" set="method" line="230">
			<f a="f">
				<f a="">
					<c path="List.T"/>
					<e path="Bool"/>
				</f>
				<c path="List"><c path="List.T"/></c>
			</f>
			<haxe_doc>Returns a list filtered with [f]. The returned list
		will contain all elements [x] for which [f(x) = true].</haxe_doc>
		</filter>
		<join public="1" set="method" line="211">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Join the element of the list by using the separator [sep].</haxe_doc>
		</join>
		<toString public="1" set="method" line="191">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a displayable representation of the String.</haxe_doc>
		</toString>
		<iterator public="1" set="method" line="152">
			<f a=""><t path="Iterator"><c path="List.T"/></t></f>
			<haxe_doc>Returns an iterator on the elements of the list.</haxe_doc>
		</iterator>
		<remove public="1" set="method" line="129">
			<f a="v">
				<c path="List.T"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>Remove the first element that is [== v] from the list.
		Returns [true] if an element was removed, [false] otherwise.</haxe_doc>
		</remove>
		<clear public="1" set="method" line="119">
			<f a=""><e path="Void"/></f>
			<haxe_doc>Makes the list empty.</haxe_doc>
		</clear>
		<isEmpty public="1" set="method" line="112">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>Tells if a list is empty.</haxe_doc>
		</isEmpty>
		<pop public="1" set="method" line="98">
			<f a=""><t path="Null"><c path="List.T"/></t></f>
			<haxe_doc>Removes the first element of the list and
		returns it or simply returns null if the
		list is empty.</haxe_doc>
		</pop>
		<last public="1" set="method" line="88">
			<f a=""><t path="Null"><c path="List.T"/></t></f>
			<haxe_doc>Returns the last element of the list, or null
		if the list is empty.</haxe_doc>
		</last>
		<first public="1" set="method" line="80">
			<f a=""><t path="Null"><c path="List.T"/></t></f>
			<haxe_doc>Returns the first element of the list, or null
		if the list is empty.</haxe_doc>
		</first>
		<push public="1" set="method" line="64">
			<f a="item">
				<c path="List.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Push an element at the beginning of the list.</haxe_doc>
		</push>
		<add public="1" set="method" line="51">
			<f a="item">
				<c path="List.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Add an element at the end of the list.</haxe_doc>
		</add>
		<length public="1" set="null">
			<c path="Int"/>
			<haxe_doc>The number of elements in this list.</haxe_doc>
		</length>
		<q><c path="Array"><d/></c></q>
		<h><c path="Array"><d/></c></h>
		<new public="1" set="method" line="44">
			<f a=""><e path="Void"/></f>
			<haxe_doc>Creates a new empty list.</haxe_doc>
		</new>
		<haxe_doc>A linked-list of elements. The list is composed of two-elements arrays
	that are chained together. It's optimized so that adding or removing an
	element doesn't imply to copy the whole array content everytime.</haxe_doc>
	</class>
	<class path="Math" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/Math.hx" extern="1">
		<PI public="1" set="null" static="1"><c path="Float"/></PI>
		<NaN public="1" set="null" static="1"><c path="Float"/></NaN>
		<NEGATIVE_INFINITY public="1" set="null" static="1"><c path="Float"/></NEGATIVE_INFINITY>
		<POSITIVE_INFINITY public="1" set="null" static="1"><c path="Float"/></POSITIVE_INFINITY>
		<abs public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></abs>
		<min public="1" set="method" static="1"><f a="a:b">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></min>
		<max public="1" set="method" static="1"><f a="a:b">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></max>
		<sin public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></sin>
		<cos public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></cos>
		<atan2 public="1" set="method" static="1"><f a="y:x">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></atan2>
		<tan public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></tan>
		<exp public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></exp>
		<log public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></log>
		<sqrt public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></sqrt>
		<round public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Int"/>
</f></round>
		<floor public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Int"/>
</f></floor>
		<ceil public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Int"/>
</f></ceil>
		<atan public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></atan>
		<asin public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></asin>
		<acos public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></acos>
		<pow public="1" set="method" static="1"><f a="v:exp">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></pow>
		<random public="1" set="method" static="1"><f a=""><c path="Float"/></f></random>
		<isFinite public="1" set="method" static="1"><f a="f">
	<c path="Float"/>
	<e path="Bool"/>
</f></isFinite>
		<isNaN public="1" set="method" static="1"><f a="f">
	<c path="Float"/>
	<e path="Bool"/>
</f></isNaN>
		<haxe_doc>This class defines mathematical functions and constants.</haxe_doc>
	</class>
	<class path="Reflect" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/js/_std/Reflect.hx">
		<hasField public="1" set="method" line="28" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>Tells if an object has a field set. This doesn't take into account the object prototype (class methods).</haxe_doc>
		</hasField>
		<field public="1" get="inline" set="null" line="32" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Returns the field of an object, or null if [o] is not an object or doesn't have this field.</haxe_doc>
		</field>
		<setField public="1" get="inline" set="null" line="41" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc>Set an object field value.</haxe_doc>
		</setField>
		<getProperty public="1" get="inline" set="null" line="46" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":defineFeature"/></meta>
			<haxe_doc>Similar to field but also supports property (might be slower).</haxe_doc>
		</getProperty>
		<setProperty public="1" get="inline" set="null" line="52" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<e path="Void"/>
			</f>
			<meta><m n=":defineFeature"/></meta>
			<haxe_doc>Similar to setField but also supports property (might be slower).</haxe_doc>
		</setProperty>
		<callMethod public="1" get="inline" set="null" line="57" static="1">
			<f a="o:func:args">
				<d/>
				<d/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<haxe_doc>Call a method with the given object and arguments.</haxe_doc>
		</callMethod>
		<fields public="1" set="method" line="61" static="1">
			<f a="o">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns the list of fields of an object, excluding its prototype (class methods).</haxe_doc>
		</fields>
		<isFunction public="1" set="method" line="72" static="1">
			<f a="f">
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>Tells if a value is a function or not.</haxe_doc>
		</isFunction>
		<compare public="1" params="T" set="method" line="76" static="1">
			<f a="a:b">
				<c path="compare.T"/>
				<c path="compare.T"/>
				<c path="Int"/>
			</f>
			<haxe_doc>Generic comparison function, does not work for methods, see [compareMethods]</haxe_doc>
		</compare>
		<compareMethods public="1" set="method" line="80" static="1">
			<f a="f1:f2">
				<d/>
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>Compare two methods closures. Returns true if it's the same method of the same instance.</haxe_doc>
		</compareMethods>
		<isObject public="1" set="method" line="88" static="1">
			<f a="v">
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>Tells if a value is an object or not.</haxe_doc>
		</isObject>
		<deleteField public="1" set="method" line="95" static="1">
			<f a="o:f">
				<d/>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>Delete an object field.</haxe_doc>
		</deleteField>
		<copy public="1" params="T" set="method" line="101" static="1">
			<f a="o">
				<c path="copy.T"/>
				<c path="copy.T"/>
			</f>
			<haxe_doc>Make a copy of the fields of an object.</haxe_doc>
		</copy>
		<makeVarArgs public="1" set="method" line="108" static="1">
			<f a="f">
				<f a="">
					<c path="Array"><d/></c>
					<d/>
				</f>
				<d/>
			</f>
			<haxe_doc>Transform a function taking an array of arguments into a function that can
		be called with any number of arguments.</haxe_doc>
		</makeVarArgs>
		<haxe_doc>The Reflect API is a way to manipulate values dynamicly through an
	abstract interface in an untyped manner. Use with care.</haxe_doc>
		<meta><m n=":core_api"/></meta>
	</class>
	<class path="String" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/js/_std/String.hx" extern="1">
		<fromCharCode public="1" set="method" static="1"><f a="code">
	<c path="Int"/>
	<c path="String"/>
</f></fromCharCode>
		<substr public="1" get="inline" set="null" line="43">
			<f a="pos:?len">
				<c path="Int"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a part of the String, taking [len] characters starting from [pos].
		If [len] is not specified, it takes all the remaining characters.</haxe_doc>
		</substr>
		<charCodeAt public="1" get="inline" set="null" line="39">
			<f a="index">
				<c path="Int"/>
				<t path="Null"><c path="Int"/></t>
			</f>
			<haxe_doc>Returns the character code at the given position.
		Returns [null] if outside of String bounds.</haxe_doc>
		</charCodeAt>
		<substring public="1" set="method">
			<f a="startIndex:?endIndex">
				<c path="Int"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[Returns a part of the String, taking from [startIndex] to [endIndex] - 1.
		If [endIndex] is not specified, length is used.
		If [startIndex] or [endIndex] is smaller than 0, than 0 is used.
		If [startIndex] > [endIndex] then they are swaped.]]></haxe_doc>
		</substring>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Split the string using the specified delimiter.</haxe_doc>
		</split>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>Similar to [indexOf] but returns the latest index.</haxe_doc>
		</lastIndexOf>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>Returns the index of first occurence of [value]
		Returns [1-1] if [value] is not found.
		The optional [startIndex] parameter allows you to specify at which character to start searching.
		The position returned is still relative to the beginning of the string.</haxe_doc>
		</indexOf>
		<charAt public="1" set="method">
			<f a="index">
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at the given position.
		Returns the empty String if outside of String bounds.</haxe_doc>
		</charAt>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns an String where all characters have been lowercased.</haxe_doc>
		</toLowerCase>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns an String where all characters have been uppercased.</haxe_doc>
		</toUpperCase>
		<length public="1" set="null">
			<c path="Int"/>
			<haxe_doc>The number of characters in the String.</haxe_doc>
		</length>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.</haxe_doc>
		<meta><m n=":core_api"/></meta>
	</class>
	<class path="Std" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/js/_std/Std.hx">
		<is public="1" get="inline" set="null" line="29" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>Tells if a value v is of the type t.</haxe_doc>
		</is>
		<string public="1" set="method" line="33" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Convert any value to a String</haxe_doc>
		</string>
		<int public="1" get="inline" set="null" line="37" static="1">
			<f a="x">
				<c path="Float"/>
				<c path="Int"/>
			</f>
			<haxe_doc>Convert a Float to an Int, rounded down.</haxe_doc>
		</int>
		<parseInt public="1" set="method" line="41" static="1">
			<f a="x">
				<c path="String"/>
				<t path="Null"><c path="Int"/></t>
			</f>
			<haxe_doc>Convert a String to an Int, parsing different possible representations. Returns [null] if could not be parsed.</haxe_doc>
		</parseInt>
		<parseFloat public="1" set="method" line="51" static="1">
			<f a="x">
				<c path="String"/>
				<c path="Float"/>
			</f>
			<haxe_doc>Convert a String to a Float, parsing different possible reprensations.</haxe_doc>
		</parseFloat>
		<random public="1" set="method" line="55" static="1">
			<f a="x">
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>Return a random integer between 0 included and x excluded.</haxe_doc>
		</random>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta><m n=":core_api"/></meta>
	</class>
	<enum path="Void" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/StdTypes.hx" module="StdTypes"><haxe_doc>The standard Void type. Only [null] values can be of the type [Void].</haxe_doc></enum>
	<class path="Float" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/StdTypes.hx" module="StdTypes" extern="1"><haxe_doc>The standard Float type, this is a double-precision IEEE 64bit float.</haxe_doc></class>
	<class path="Int" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/StdTypes.hx" module="StdTypes" extern="1">
		<extends path="Float"/>
		<haxe_doc>The standard Int type. Its precision depends on the platform.</haxe_doc>
	</class>
	<typedef path="Null" params="T" file="Z:\3Work\Haxe-2.10\Haxe/std/StdTypes.hx" module="StdTypes">
		<c path="Null.T"/>
		<haxe_doc>[Null] can be useful in two cases. In order to document some methods
	that accepts or can return a [null] value, or for the Flash9 compiler and AS3
	generator to distinguish between base values that can be null and others that
	can't.</haxe_doc>
	</typedef>
	<enum path="Bool" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/StdTypes.hx" module="StdTypes">
		<true/>
		<false/>
		<haxe_doc>The standard Boolean type is represented as an enum with two choices.</haxe_doc>
	</enum>
	<class path="Dynamic" params="T" file="Z:\3Work\Haxe-2.10\Haxe/std/StdTypes.hx" module="StdTypes" extern="1"><haxe_doc>Dynamic is an internal compiler type which has special behavior.
	See the haXe language reference for more informations.</haxe_doc></class>
	<typedef path="Iterator" params="T" file="Z:\3Work\Haxe-2.10\Haxe/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method"><f a=""><c path="Iterator.T"/></f></next>
			<hasNext set="method"><f a=""><e path="Bool"/></f></hasNext>
		</a>
		<haxe_doc>An Iterator is a structure that permits to list a given container
	values. It can be used by your own data structures. See the haXe
	documentation for more informations.</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="Z:\3Work\Haxe-2.10\Haxe/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An Iterable is a data structure which has an iterator() method.
	See [Lambda] for generic functions on iterable structures.</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="Z:\3Work\Haxe-2.10\Haxe/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>ArrayAccess is used to indicate a class that can be accessed using brackets.
	The type parameter represent the type of the elements stored.</haxe_doc></class>
	<class path="StringBuf" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/StringBuf.hx">
		<toString public="1" get="inline" set="null" line="64">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the content of the string buffer.
		The buffer is not emptied by this operation.</haxe_doc>
		</toString>
		<addSub public="1" get="inline" set="null" line="56">
			<f a="s:pos:?len">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Adds a character to the string buffer.</haxe_doc>
		</addSub>
		<addChar public="1" get="inline" set="null" line="49">
			<f a="c">
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Adds a part of a string to the string buffer.</haxe_doc>
		</addChar>
		<add public="1" get="inline" set="null" line="42">
			<f a="x">
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc>Adds the representation of any value to the string buffer.</haxe_doc>
		</add>
		<b><c path="String"/></b>
		<new public="1" set="method" line="37">
			<f a=""><e path="Void"/></f>
			<haxe_doc>Creates a new string buffer.</haxe_doc>
		</new>
		<haxe_doc>A String buffer is an efficient way to build a big string by
	appending small elements together.</haxe_doc>
	</class>
	<class path="StringTools" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/StringTools.hx">
		<urlEncode public="1" set="method" line="41" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encode an URL by using the standard format.</haxe_doc>
		</urlEncode>
		<urlDecode public="1" set="method" line="68" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Decode an URL using the standard format.</haxe_doc>
		</urlDecode>
		<htmlEscape public="1" set="method" line="95" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Escape HTML special characters of the string.</haxe_doc>
		</htmlEscape>
		<htmlUnescape public="1" set="method" line="102" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Unescape HTML special characters of the string.</haxe_doc>
		</htmlUnescape>
		<startsWith public="1" set="method" line="113" static="1">
			<f a="s:start">
				<c path="String"/>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>Tells if the string [s] starts with the string [start].</haxe_doc>
		</startsWith>
		<endsWith public="1" set="method" line="126" static="1">
			<f a="s:end">
				<c path="String"/>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>Tells if the string [s] ends with the string [end].</haxe_doc>
		</endsWith>
		<isSpace public="1" set="method" line="141" static="1">
			<f a="s:pos">
				<c path="String"/>
				<c path="Int"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>Tells if the character in the string [s] at position [pos] is a space.</haxe_doc>
		</isSpace>
		<ltrim public="1" set="method" line="149" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes spaces at the left of the String [s].</haxe_doc>
		</ltrim>
		<rtrim public="1" set="method" line="170" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes spaces at the right of the String [s].</haxe_doc>
		</rtrim>
		<trim public="1" set="method" line="192" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes spaces at the beginning and the end of the String [s].</haxe_doc>
		</trim>
		<rpad public="1" set="method" line="207" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Pad the string [s] by appending [c] at its right until it reach [l] characters.</haxe_doc>
		</rpad>
		<lpad public="1" set="method" line="229" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Pad the string [s] by appending [c] at its left until it reach [l] characters.</haxe_doc>
		</lpad>
		<replace public="1" set="method" line="254" static="1">
			<f a="s:sub:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Replace all occurences of the string [sub] in the string [s] by the string [by].</haxe_doc>
		</replace>
		<hex public="1" set="method" line="269" static="1">
			<f a="n:?digits">
				<c path="Int"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encode a number into a hexadecimal representation, with an optional number of zeros for left padding.</haxe_doc>
		</hex>
		<fastCodeAt public="1" get="inline" set="null" line="292" static="1">
			<f a="s:index">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>Provides a fast native string charCodeAt access. Since the EOF value might vary depending on the platforms, always test with StringTools.isEOF.
		Only guaranteed to work if index in [0,s.length] range. Might not work with strings containing \0 char.</haxe_doc>
		</fastCodeAt>
		<isEOF public="1" get="inline" set="null" line="322" static="1"><f a="c">
	<c path="Int"/>
	<e path="Bool"/>
</f></isEOF>
		<haxe_doc>The StringTools class contains some extra functionalities for [String]
	manipulation. It's stored in a different class in order to prevent
	the standard [String] of being bloated and thus increasing the size of
	each application using it.</haxe_doc>
	</class>
	<enum path="ValueType" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/js/_std/Type.hx" module="Type">
		<TUnknown/>
		<TObject/>
		<TNull/>
		<TInt/>
		<TFunction/>
		<TFloat/>
		<TEnum a="e"><c path="Enum"><d/></c></TEnum>
		<TClass a="c"><c path="Class"><d/></c></TClass>
		<TBool/>
	</enum>
	<class path="Type" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/js/_std/Type.hx">
		<getClass public="1" params="T" set="method" line="40" static="1">
			<f a="o">
				<c path="getClass.T"/>
				<c path="Class"><c path="getClass.T"/></c>
			</f>
			<haxe_doc>Returns the class of a value or [null] if this value is not a Class instance.</haxe_doc>
		</getClass>
		<getEnum public="1" set="method" line="46" static="1">
			<f a="o">
				<c path="EnumValue"/>
				<c path="Enum"><d/></c>
			</f>
			<haxe_doc>Returns the enum of a value or [null] if this value is not an Enum instance.</haxe_doc>
		</getEnum>
		<getSuperClass public="1" set="method" line="52" static="1">
			<f a="c">
				<c path="Class"><d/></c>
				<c path="Class"><d/></c>
			</f>
			<haxe_doc>Returns the super-class of a class, or null if no super class.</haxe_doc>
		</getSuperClass>
		<getClassName public="1" set="method" line="57" static="1">
			<f a="c">
				<c path="Class"><d/></c>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the complete name of a class.</haxe_doc>
		</getClassName>
		<getEnumName public="1" set="method" line="62" static="1">
			<f a="e">
				<c path="Enum"><d/></c>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the complete name of an enum.</haxe_doc>
		</getEnumName>
		<resolveClass public="1" set="method" line="67" static="1">
			<f a="name">
				<c path="String"/>
				<c path="Class"><d/></c>
			</f>
			<haxe_doc>Evaluates a class from a name. The class must have been compiled
		to be accessible.</haxe_doc>
		</resolveClass>
		<resolveEnum public="1" set="method" line="75" static="1">
			<f a="name">
				<c path="String"/>
				<c path="Enum"><d/></c>
			</f>
			<haxe_doc>Evaluates an enum from a name. The enum must have been compiled
		to be accessible.</haxe_doc>
		</resolveEnum>
		<createInstance public="1" params="T" set="method" line="83" static="1">
			<f a="cl:args">
				<c path="Class"><c path="createInstance.T"/></c>
				<c path="Array"><d/></c>
				<c path="createInstance.T"/>
			</f>
			<haxe_doc>Creates an instance of the given class with the list of constructor arguments.</haxe_doc>
		</createInstance>
		<createEmptyInstance public="1" params="T" set="method" line="109" static="1">
			<f a="cl">
				<c path="Class"><c path="createEmptyInstance.T"/></c>
				<c path="createEmptyInstance.T"/>
			</f>
			<haxe_doc>Similar to [Reflect.createInstance] excepts that the constructor is not called.
		This enables you to create an instance without any side-effect.</haxe_doc>
		</createEmptyInstance>
		<createEnum public="1" params="T" set="method" line="114" static="1">
			<f a="e:constr:?params">
				<c path="Enum"><c path="createEnum.T"/></c>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createEnum.T"/>
			</f>
			<haxe_doc>Create an instance of an enum by using a constructor name and parameters.</haxe_doc>
		</createEnum>
		<createEnumIndex public="1" params="T" set="method" line="126" static="1">
			<f a="e:index:?params">
				<c path="Enum"><c path="createEnumIndex.T"/></c>
				<c path="Int"/>
				<c path="Array"><d/></c>
				<c path="createEnumIndex.T"/>
			</f>
			<haxe_doc>Create an instance of an enum by using a constructor index and parameters.</haxe_doc>
		</createEnumIndex>
		<getInstanceFields public="1" set="method" line="132" static="1">
			<f a="c">
				<c path="Class"><d/></c>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns the list of instance fields.</haxe_doc>
		</getInstanceFields>
		<getClassFields public="1" set="method" line="140" static="1">
			<f a="c">
				<c path="Class"><d/></c>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns the list of a class static fields.</haxe_doc>
		</getClassFields>
		<getEnumConstructs public="1" set="method" line="150" static="1">
			<f a="e">
				<c path="Enum"><d/></c>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns all the available constructor names for an enum.</haxe_doc>
		</getEnumConstructs>
		<typeof public="1" set="method" line="155" static="1">
			<f a="v">
				<d/>
				<e path="ValueType"/>
			</f>
			<haxe_doc>Returns the runtime type of a value.</haxe_doc>
		</typeof>
		<enumEq public="1" params="T" set="method" line="185" static="1">
			<f a="a:b">
				<c path="enumEq.T"/>
				<c path="enumEq.T"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>Recursively compare two enums constructors and parameters.</haxe_doc>
		</enumEq>
		<enumConstructor public="1" get="inline" set="null" line="203" static="1">
			<f a="e">
				<c path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor of an enum</haxe_doc>
		</enumConstructor>
		<enumParameters public="1" get="inline" set="null" line="207" static="1">
			<f a="e">
				<c path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns the parameters of an enum</haxe_doc>
		</enumParameters>
		<enumIndex public="1" get="inline" set="null" line="211" static="1">
			<f a="e">
				<c path="EnumValue"/>
				<c path="Int"/>
			</f>
			<haxe_doc>Returns the index of the constructor of an enum</haxe_doc>
		</enumIndex>
		<allEnums public="1" params="T" set="method" line="215" static="1">
			<f a="e">
				<c path="Enum"><c path="allEnums.T"/></c>
				<c path="Array"><c path="allEnums.T"/></c>
			</f>
			<haxe_doc>Returns the list of all enum values that don't take any parameter.</haxe_doc>
		</allEnums>
		<haxe_doc>The haXe Reflection API enables you to retreive informations about any value,
	Classes and Enums at runtime.</haxe_doc>
		<meta><m n=":core_api"/></meta>
	</class>
	<class path="haxe.Int32" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/haxe/Int32.hx">
		<make public="1" get="inline" set="null" line="29" static="1"><f a="a:b">
	<c path="Int"/>
	<c path="Int"/>
	<c path="haxe.Int32"/>
</f></make>
		<ofInt public="1" get="inline" set="null" line="33" static="1"><f a="x">
	<c path="Int"/>
	<c path="haxe.Int32"/>
</f></ofInt>
		<clamp get="inline" set="null" line="37" static="1"><f a="x">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></clamp>
		<toInt public="1" get="inline" set="null" line="45" static="1"><f a="x">
	<c path="haxe.Int32"/>
	<c path="Int"/>
</f></toInt>
		<toNativeInt public="1" get="inline" set="null" line="54" static="1"><f a="x">
	<c path="haxe.Int32"/>
	<c path="Int"/>
</f></toNativeInt>
		<add public="1" get="inline" set="null" line="58" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></add>
		<sub public="1" get="inline" set="null" line="62" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></sub>
		<mul public="1" get="inline" set="null" line="66" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></mul>
		<div public="1" get="inline" set="null" line="74" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></div>
		<mod public="1" get="inline" set="null" line="78" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></mod>
		<shl public="1" get="inline" set="null" line="82" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="Int"/>
	<c path="haxe.Int32"/>
</f></shl>
		<shr public="1" get="inline" set="null" line="86" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="Int"/>
	<c path="haxe.Int32"/>
</f></shr>
		<ushr public="1" get="inline" set="null" line="90" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="Int"/>
	<c path="haxe.Int32"/>
</f></ushr>
		<and public="1" get="inline" set="null" line="94" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></and>
		<or public="1" get="inline" set="null" line="98" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></or>
		<xor public="1" get="inline" set="null" line="102" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></xor>
		<neg public="1" get="inline" set="null" line="106" static="1"><f a="a">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></neg>
		<isNeg public="1" get="inline" set="null" line="110" static="1"><f a="a">
	<c path="haxe.Int32"/>
	<e path="Bool"/>
</f></isNeg>
		<isZero public="1" get="inline" set="null" line="114" static="1"><f a="a">
	<c path="haxe.Int32"/>
	<e path="Bool"/>
</f></isZero>
		<complement public="1" get="inline" set="null" line="118" static="1"><f a="a">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></complement>
		<compare public="1" get="inline" set="null" line="122" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="Int"/>
</f></compare>
		<ucompare public="1" set="method" line="133" static="1">
			<f a="a:b">
				<c path="haxe.Int32"/>
				<c path="haxe.Int32"/>
				<c path="Int"/>
			</f>
			<haxe_doc>Compare two Int32 in unsigned mode.</haxe_doc>
		</ucompare>
	</class>
	<class path="haxe.Int64" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/haxe/Int64.hx">
		<make public="1" get="inline" set="null" line="58" static="1"><f a="high:low">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="haxe.Int64"/>
</f></make>
		<ofInt public="1" get="inline" set="null" line="62" static="1"><f a="x">
	<c path="Int"/>
	<c path="haxe.Int64"/>
</f></ofInt>
		<ofInt32 public="1" get="inline" set="null" line="66" static="1"><f a="x">
	<c path="haxe.Int32"/>
	<c path="haxe.Int64"/>
</f></ofInt32>
		<toInt public="1" set="method" line="70" static="1"><f a="x">
	<c path="haxe.Int64"/>
	<c path="Int"/>
</f></toInt>
		<getLow public="1" set="method" line="79" static="1"><f a="x">
	<c path="haxe.Int64"/>
	<c path="haxe.Int32"/>
</f></getLow>
		<getHigh public="1" set="method" line="83" static="1"><f a="x">
	<c path="haxe.Int64"/>
	<c path="haxe.Int32"/>
</f></getHigh>
		<add public="1" set="method" line="87" static="1"><f a="a:b">
	<c path="haxe.Int64"/>
	<c path="haxe.Int64"/>
	<c path="haxe.Int64"/>
</f></add>
		<sub public="1" set="method" line="95" static="1"><f a="a:b">
	<c path="haxe.Int64"/>
	<c path="haxe.Int64"/>
	<c path="haxe.Int64"/>
</f></sub>
		<mul public="1" set="method" line="103" static="1"><f a="a:b">
	<c path="haxe.Int64"/>
	<c path="haxe.Int64"/>
	<c path="haxe.Int64"/>
</f></mul>
		<divMod set="method" line="120" static="1"><f a="modulus:divisor">
	<c path="haxe.Int64"/>
	<c path="haxe.Int64"/>
	<a>
		<quotient><c path="haxe.Int64"/></quotient>
		<modulus><c path="haxe.Int64"/></modulus>
	</a>
</f></divMod>
		<div public="1" get="inline" set="null" line="147" static="1"><f a="a:b">
	<c path="haxe.Int64"/>
	<c path="haxe.Int64"/>
	<c path="haxe.Int64"/>
</f></div>
		<mod public="1" get="inline" set="null" line="155" static="1"><f a="a:b">
	<c path="haxe.Int64"/>
	<c path="haxe.Int64"/>
	<c path="haxe.Int64"/>
</f></mod>
		<shl public="1" get="inline" set="null" line="163" static="1"><f a="a:b">
	<c path="haxe.Int64"/>
	<c path="Int"/>
	<c path="haxe.Int64"/>
</f></shl>
		<shr public="1" get="inline" set="null" line="167" static="1"><f a="a:b">
	<c path="haxe.Int64"/>
	<c path="Int"/>
	<c path="haxe.Int64"/>
</f></shr>
		<ushr public="1" get="inline" set="null" line="171" static="1"><f a="a:b">
	<c path="haxe.Int64"/>
	<c path="Int"/>
	<c path="haxe.Int64"/>
</f></ushr>
		<and public="1" get="inline" set="null" line="175" static="1"><f a="a:b">
	<c path="haxe.Int64"/>
	<c path="haxe.Int64"/>
	<c path="haxe.Int64"/>
</f></and>
		<or public="1" get="inline" set="null" line="179" static="1"><f a="a:b">
	<c path="haxe.Int64"/>
	<c path="haxe.Int64"/>
	<c path="haxe.Int64"/>
</f></or>
		<xor public="1" get="inline" set="null" line="183" static="1"><f a="a:b">
	<c path="haxe.Int64"/>
	<c path="haxe.Int64"/>
	<c path="haxe.Int64"/>
</f></xor>
		<neg public="1" get="inline" set="null" line="187" static="1"><f a="a">
	<c path="haxe.Int64"/>
	<c path="haxe.Int64"/>
</f></neg>
		<isNeg public="1" get="inline" set="null" line="195" static="1"><f a="a">
	<c path="haxe.Int64"/>
	<e path="Bool"/>
</f></isNeg>
		<isZero public="1" get="inline" set="null" line="199" static="1"><f a="a">
	<c path="haxe.Int64"/>
	<e path="Bool"/>
</f></isZero>
		<compare public="1" get="inline" set="null" line="203" static="1"><f a="a:b">
	<c path="haxe.Int64"/>
	<c path="haxe.Int64"/>
	<c path="Int"/>
</f></compare>
		<ucompare public="1" get="inline" set="null" line="211" static="1">
			<f a="a:b">
				<c path="haxe.Int64"/>
				<c path="haxe.Int64"/>
				<c path="Int"/>
			</f>
			<haxe_doc>Compare two Int64 in unsigned mode.</haxe_doc>
		</ucompare>
		<toStr public="1" get="inline" set="null" line="216" static="1"><f a="a">
	<c path="haxe.Int64"/>
	<c path="String"/>
</f></toStr>
		<toString set="method" line="38"><f a=""><c path="String"/></f></toString>
		<low><c path="haxe.Int32"/></low>
		<high><c path="haxe.Int32"/></high>
		<new set="method" line="33"><f a="high:low">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<e path="Void"/>
</f></new>
	</class>
	<typedef path="haxe.PosInfos" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/haxe/PosInfos.hx"><a>
	<methodName><c path="String"/></methodName>
	<lineNumber><c path="Int"/></lineNumber>
	<fileName><c path="String"/></fileName>
	<customParams>
		<c path="Array"><d/></c>
		<meta><m n=":optional"/></meta>
	</customParams>
	<className><c path="String"/></className>
</a></typedef>
	<enum path="haxe.StackItem" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/haxe/Stack.hx" module="haxe.Stack">
		<Module a="m"><c path="String"/></Module>
		<Method a="classname:method">
			<c path="String"/>
			<c path="String"/>
		</Method>
		<Lambda a="v"><c path="Int"/></Lambda>
		<FilePos a="s:file:line">
			<t path="Null"><e path="haxe.StackItem"/></t>
			<c path="String"/>
			<c path="Int"/>
		</FilePos>
		<CFunction/>
		<haxe_doc>Elements return by [Stack] methods.</haxe_doc>
	</enum>
	<class path="haxe.Stack" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/haxe/Stack.hx">
		<callStack public="1" set="method" line="46" static="1">
			<f a=""><c path="Array"><e path="haxe.StackItem"/></c></f>
			<haxe_doc>Return the call stack elements, or an empty array if not available.</haxe_doc>
		</callStack>
		<exceptionStack public="1" set="method" line="97" static="1">
			<f a=""><c path="Array"><e path="haxe.StackItem"/></c></f>
			<haxe_doc>Return the exception stack : this is the stack elements between
		the place the last exception was thrown and the place it was
		caught, or an empty array if not available.</haxe_doc>
		</exceptionStack>
		<toString public="1" set="method" line="131" static="1">
			<f a="stack">
				<c path="Array"><e path="haxe.StackItem"/></c>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a representation of the stack as a printable string.</haxe_doc>
		</toString>
		<itemToString set="method" line="140" static="1"><f a="b:s">
	<c path="StringBuf"/>
	<e path="haxe.StackItem"/>
	<e path="Void"/>
</f></itemToString>
		<makeStack set="method" line="167" static="1"><f a="s">
	<a><split set="null"><f a="">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</f></split></a>
	<c path="Array"><e path="haxe.StackItem"/></c>
</f></makeStack>
		<haxe_doc>Get informations about the call stack.</haxe_doc>
	</class>
	<typedef path="haxe.macro.Position" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<min><c path="Int"/></min>
	<max><c path="Int"/></max>
	<file><c path="String"/></file>
</a></typedef>
	<enum path="haxe.macro.Constant" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<CType a="s"><c path="String"/></CType>
		<CString a="s"><c path="String"/></CString>
		<CRegexp a="r:opt">
			<c path="String"/>
			<c path="String"/>
		</CRegexp>
		<CInt a="v"><c path="String"/></CInt>
		<CIdent a="s"><c path="String"/></CIdent>
		<CFloat a="f"><c path="String"/></CFloat>
	</enum>
	<enum path="haxe.macro.Binop" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<OpXor/>
		<OpUShr/>
		<OpSub/>
		<OpShr/>
		<OpShl/>
		<OpOr/>
		<OpNotEq/>
		<OpMult/>
		<OpMod/>
		<OpLte/>
		<OpLt/>
		<OpInterval/>
		<OpGte/>
		<OpGt/>
		<OpEq/>
		<OpDiv/>
		<OpBoolOr/>
		<OpBoolAnd/>
		<OpAssignOp a="op"><e path="haxe.macro.Binop"/></OpAssignOp>
		<OpAssign/>
		<OpAnd/>
		<OpAdd/>
	</enum>
	<enum path="haxe.macro.Unop" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<OpNot/>
		<OpNegBits/>
		<OpNeg/>
		<OpIncrement/>
		<OpDecrement/>
	</enum>
	<typedef path="haxe.macro.Expr" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/haxe/macro/Expr.hx"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<expr><e path="haxe.macro.ExprDef"/></expr>
</a></typedef>
	<typedef path="haxe.macro.ExprRequire" params="T" file="Z:\3Work\Haxe-2.10\Haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><t path="haxe.macro.Expr"/></typedef>
	<typedef path="haxe.macro.ExprOf" params="T" file="Z:\3Work\Haxe-2.10\Haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><t path="haxe.macro.Expr"/></typedef>
	<enum path="haxe.macro.ExprDef" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<EWhile a="econd:e:normalWhile">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<e path="Bool"/>
		</EWhile>
		<EVars a="vars"><c path="Array"><a>
	<type><t path="Null"><e path="haxe.macro.ComplexType"/></t></type>
	<name><c path="String"/></name>
	<expr><t path="Null"><t path="haxe.macro.Expr"/></t></expr>
</a></c></EVars>
		<EUntyped a="e"><t path="haxe.macro.Expr"/></EUntyped>
		<EUnop a="op:postFix:e">
			<e path="haxe.macro.Unop"/>
			<e path="Bool"/>
			<t path="haxe.macro.Expr"/>
		</EUnop>
		<EType a="e:field">
			<t path="haxe.macro.Expr"/>
			<c path="String"/>
		</EType>
		<ETry a="e:catches">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><a>
	<type><e path="haxe.macro.ComplexType"/></type>
	<name><c path="String"/></name>
	<expr><t path="haxe.macro.Expr"/></expr>
</a></c>
		</ETry>
		<EThrow a="e"><t path="haxe.macro.Expr"/></EThrow>
		<ETernary a="econd:eif:eelse">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</ETernary>
		<ESwitch a="e:cases:edef">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><a>
	<values><c path="Array"><t path="haxe.macro.Expr"/></c></values>
	<expr><t path="haxe.macro.Expr"/></expr>
</a></c>
			<t path="Null"><t path="haxe.macro.Expr"/></t>
		</ESwitch>
		<EReturn a="?e"><t path="haxe.macro.Expr"/></EReturn>
		<EParenthesis a="e"><t path="haxe.macro.Expr"/></EParenthesis>
		<EObjectDecl a="fields"><c path="Array"><a>
	<field><c path="String"/></field>
	<expr><t path="haxe.macro.Expr"/></expr>
</a></c></EObjectDecl>
		<ENew a="t:params">
			<t path="haxe.macro.TypePath"/>
			<c path="Array"><t path="haxe.macro.Expr"/></c>
		</ENew>
		<EIn a="e1:e2">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</EIn>
		<EIf a="econd:eif:eelse">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<t path="Null"><t path="haxe.macro.Expr"/></t>
		</EIf>
		<EFunction a="name:f">
			<t path="Null"><c path="String"/></t>
			<t path="haxe.macro.Function"/>
		</EFunction>
		<EFor a="it:expr">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</EFor>
		<EField a="e:field">
			<t path="haxe.macro.Expr"/>
			<c path="String"/>
		</EField>
		<EDisplayNew a="t"><t path="haxe.macro.TypePath"/></EDisplayNew>
		<EDisplay a="e:isCall">
			<t path="haxe.macro.Expr"/>
			<e path="Bool"/>
		</EDisplay>
		<EContinue/>
		<EConst a="c"><e path="haxe.macro.Constant"/></EConst>
		<ECheckType a="e:t">
			<t path="haxe.macro.Expr"/>
			<e path="haxe.macro.ComplexType"/>
		</ECheckType>
		<ECast a="e:t">
			<t path="haxe.macro.Expr"/>
			<t path="Null"><e path="haxe.macro.ComplexType"/></t>
		</ECast>
		<ECall a="e:params">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Expr"/></c>
		</ECall>
		<EBreak/>
		<EBlock a="exprs"><c path="Array"><t path="haxe.macro.Expr"/></c></EBlock>
		<EBinop a="op:e1:e2">
			<e path="haxe.macro.Binop"/>
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</EBinop>
		<EArrayDecl a="values"><c path="Array"><t path="haxe.macro.Expr"/></c></EArrayDecl>
		<EArray a="e1:e2">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</EArray>
	</enum>
	<enum path="haxe.macro.ComplexType" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TPath a="p"><t path="haxe.macro.TypePath"/></TPath>
		<TParent a="t"><e path="haxe.macro.ComplexType"/></TParent>
		<TOptional a="t"><e path="haxe.macro.ComplexType"/></TOptional>
		<TFunction a="args:ret">
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<e path="haxe.macro.ComplexType"/>
		</TFunction>
		<TExtend a="p:fields">
			<t path="haxe.macro.TypePath"/>
			<c path="Array"><t path="haxe.macro.Field"/></c>
		</TExtend>
		<TAnonymous a="fields"><c path="Array"><t path="haxe.macro.Field"/></c></TAnonymous>
	</enum>
	<typedef path="haxe.macro.TypePath" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<sub>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</sub>
	<params><c path="Array"><e path="haxe.macro.TypeParam"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
</a></typedef>
	<enum path="haxe.macro.TypeParam" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TPType a="t"><e path="haxe.macro.ComplexType"/></TPType>
		<TPExpr a="e"><t path="haxe.macro.Expr"/></TPExpr>
	</enum>
	<typedef path="haxe.macro.Function" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<ret><t path="Null"><e path="haxe.macro.ComplexType"/></t></ret>
	<params><c path="Array"><a>
	<name><c path="String"/></name>
	<constraints><c path="Array"><e path="haxe.macro.ComplexType"/></c></constraints>
</a></c></params>
	<expr><t path="Null"><t path="haxe.macro.Expr"/></t></expr>
	<args><c path="Array"><t path="haxe.macro.FunctionArg"/></c></args>
</a></typedef>
	<typedef path="haxe.macro.FunctionArg" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<value>
		<t path="Null"><t path="haxe.macro.Expr"/></t>
		<meta><m n=":optional"/></meta>
	</value>
	<type><t path="Null"><e path="haxe.macro.ComplexType"/></t></type>
	<opt><e path="Bool"/></opt>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.macro.Metadata" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><c path="Array"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.Expr"/></c></params>
	<name><c path="String"/></name>
</a></c></typedef>
	<typedef path="haxe.macro.Field" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<name><c path="String"/></name>
	<meta>
		<t path="haxe.macro.Metadata"/>
		<meta><m n=":optional"/></meta>
	</meta>
	<kind><e path="haxe.macro.FieldType"/></kind>
	<doc>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</doc>
	<access>
		<c path="Array"><e path="haxe.macro.Access"/></c>
		<meta><m n=":optional"/></meta>
	</access>
</a></typedef>
	<enum path="haxe.macro.Access" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<AStatic/>
		<APublic/>
		<APrivate/>
		<AOverride/>
		<AInline/>
		<ADynamic/>
	</enum>
	<enum path="haxe.macro.FieldType" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<FVar a="t:?e">
			<t path="Null"><e path="haxe.macro.ComplexType"/></t>
			<t path="haxe.macro.Expr"/>
		</FVar>
		<FProp a="get:set:t:?e">
			<c path="String"/>
			<c path="String"/>
			<e path="haxe.macro.ComplexType"/>
			<t path="haxe.macro.Expr"/>
		</FProp>
		<FFun a="f"><t path="haxe.macro.Function"/></FFun>
	</enum>
	<typedef path="haxe.macro.TypeDefinition" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><a>
	<name><c path="String"/></name>
	<constraints><c path="Array"><e path="haxe.macro.ComplexType"/></c></constraints>
</a></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<meta><t path="haxe.macro.Metadata"/></meta>
	<kind><e path="haxe.macro.TypeDefKind"/></kind>
	<isExtern><e path="Bool"/></isExtern>
	<fields><c path="Array"><t path="haxe.macro.Field"/></c></fields>
</a></typedef>
	<enum path="haxe.macro.TypeDefKind" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TDStructure/>
		<TDEnum/>
		<TDClass a="?extend:?implement:?isInterface">
			<t path="haxe.macro.TypePath"/>
			<c path="Array"><t path="haxe.macro.TypePath"/></c>
			<e path="Bool"/>
		</TDClass>
	</enum>
	<class path="haxe.macro.Error" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<pos public="1"><t path="haxe.macro.Position"/></pos>
		<message public="1"><c path="String"/></message>
		<new public="1" set="method" line="213"><f a="m:p">
	<c path="String"/>
	<t path="haxe.macro.Position"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>This error can be used to handle or produce compilation errors in macros.</haxe_doc>
	</class>
	<class path="haxe.rtti.Infos" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/haxe/rtti/Infos.hx" interface="1"><haxe_doc>This is a magic interface. When a class implements [haxe.rtti.Infos], this class and all its
	subclass will get an additional static field [__rtti] storing the class type informations.</haxe_doc></class>
	<class path="js.Boot" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/js/Boot.hx">
		<__unhtml set="method" line="29" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></__unhtml>
		<__trace set="method" line="33" static="1"><f a="v:i">
	<a>
		<toString set="null"><f a=""><c path="String"/></f></toString>
		<length set="null"><c path="Int"/></length>
		<hasOwnProperty set="null"><f a="">
	<c path="String"/>
	<e path="Bool"/>
</f></hasOwnProperty>
		<__enum__ set="null"><e path="Bool"/></__enum__>
	</a>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></__trace>
		<__clear_trace set="method" line="50" static="1"><f a=""><e path="Void"/></f></__clear_trace>
		<isClass get="inline" set="null" line="62" static="1">
			<f a="o">
				<d/>
				<e path="Bool"/>
			</f>
			<meta><m n=":defineFeature"/></meta>
		</isClass>
		<isEnum get="inline" set="null" line="66" static="1">
			<f a="e">
				<d/>
				<e path="Bool"/>
			</f>
			<meta><m n=":defineFeature"/></meta>
		</isEnum>
		<getClass get="inline" set="null" line="70" static="1">
			<f a="o">
				<d/>
				<d/>
			</f>
			<meta><m n=":defineFeature"/></meta>
		</getClass>
		<__string_rec set="method" line="75" static="1">
			<f a="o:s">
				<a>
					<toString set="null"><f a=""><c path="String"/></f></toString>
					<length set="null"><c path="Int"/></length>
					<hasOwnProperty set="null"><f a="">
	<c path="String"/>
	<e path="Bool"/>
</f></hasOwnProperty>
					<__enum__ set="null"><e path="Bool"/></__enum__>
				</a>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":feature"><e>has_enum</e></m></meta>
		</__string_rec>
		<__interfLoop set="method" line="147" static="1"><f a="cc:cl">
	<d/>
	<d/>
	<e path="Bool"/>
</f></__interfLoop>
		<__instanceof set="method" line="162" static="1">
			<f a="o:cl">
				<d/>
				<t path="#Array"/>
				<e path="Bool"/>
			</f>
			<meta><m n=":feature"><e>typed_catch</e></m></meta>
		</__instanceof>
		<__cast set="method" line="198" static="1">
			<f a="o:t">
				<d/>
				<d/>
				<unknown/>
			</f>
			<meta><m n=":feature"><e>typed_cast</e></m></meta>
		</__cast>
	</class>
	<class path="js.HtmlCollection" params="T" file="Z:\3Work\Haxe-2.10\Haxe/std/js/Dom.hx" module="js.Dom" extern="1">
		<length public="1" set="null"><c path="Int"/></length>
		<haxe_dynamic><c path="js.HtmlCollection.T"/></haxe_dynamic>
	</class>
	<typedef path="js.MetaDom" params="T" file="Z:\3Work\Haxe-2.10\Haxe/std/js/Dom.hx" module="js.Dom"><a>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<replaceChild set="method"><f a="child:oldChild">
	<c path="js.MetaDom.T"/>
	<c path="js.MetaDom.T"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<c path="js.MetaDom.T"/>
	<c path="js.MetaDom.T"/>
</f></removeChild>
	<previousSibling><c path="js.MetaDom.T"/></previousSibling>
	<parentNode><c path="js.MetaDom.T"/></parentNode>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><c path="js.MetaDom.T"/></nextSibling>
	<lastChild><c path="js.MetaDom.T"/></lastChild>
	<insertBefore set="method"><f a="newChild:refChild">
	<c path="js.MetaDom.T"/>
	<c path="js.MetaDom.T"/>
	<e path="Void"/>
</f></insertBefore>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<firstChild><c path="js.MetaDom.T"/></firstChild>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<c path="js.MetaDom.T"/>
</f></cloneNode>
	<childNodes><c path="js.HtmlCollection"><c path="js.MetaDom.T"/></c></childNodes>
	<appendChild set="method"><f a="child">
	<c path="js.MetaDom.T"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Dom" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/js/Dom.hx"><t path="js.MetaDom"><t path="js.Dom"/></t></typedef>
	<typedef path="js.HtmlDom" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/js/Dom.hx" module="js.Dom"><a>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<dir><c path="String"/></dir>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.FormElement" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/js/Dom.hx" module="js.Dom"><a>
	<value><c path="String"/></value>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<select set="method"><f a=""><e path="Void"/></f></select>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onselect><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselect>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onchange><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onchange>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<form><t path="js.Form"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Anchor" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/js/Dom.hx" module="js.Dom"><a>
	<title><c path="String"/></title>
	<target><c path="String"/></target>
	<tabIndex><c path="Int"/></tabIndex>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<rev><c path="String"/></rev>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<rel><c path="String"/></rel>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<href><c path="String"/></href>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<dir><c path="String"/></dir>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
	<accessKey><c path="String"/></accessKey>
</a></typedef>
	<typedef path="js.Body" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/js/Dom.hx" module="js.Dom"><a>
	<vLink><c path="String"/></vLink>
	<title><c path="String"/></title>
	<text><c path="String"/></text>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<link><c path="String"/></link>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<dir><c path="String"/></dir>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<bgColor><c path="String"/></bgColor>
	<background><c path="String"/></background>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
	<aLink><c path="String"/></aLink>
</a></typedef>
	<typedef path="js.Button" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/js/Dom.hx" module="js.Dom"><a>
	<value><c path="String"/></value>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<select set="method"><f a=""><e path="Void"/></f></select>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onselect><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselect>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onchange><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onchange>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<form><t path="js.Form"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Checkbox" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/js/Dom.hx" module="js.Dom"><a>
	<value><c path="String"/></value>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<select set="method"><f a=""><e path="Void"/></f></select>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onselect><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselect>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onchange><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onchange>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<form><t path="js.Form"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<defaultChecked><e path="Bool"/></defaultChecked>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<checked><e path="Bool"/></checked>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Document" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/js/Dom.hx" module="js.Dom"><a>
	<writeln set="method"><f a="str">
	<c path="String"/>
	<e path="Void"/>
</f></writeln>
	<write set="method"><f a="str">
	<c path="String"/>
	<e path="Void"/>
</f></write>
	<title><c path="String"/></title>
	<styleSheets><c path="js.HtmlCollection"><t path="js.StyleSheet"/></c></styleSheets>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<referrer><c path="String"/></referrer>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<open set="method"><f a=""><e path="Void"/></f></open>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<links><c path="js.HtmlCollection"><t path="js.Link"/></c></links>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<images><c path="js.HtmlCollection"><t path="js.Image"/></c></images>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getElementsByTag set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTag>
	<getElementsByName set="method"><f a="name">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByName>
	<getElementById set="method"><f a="id">
	<c path="String"/>
	<t path="js.HtmlDom"/>
</f></getElementById>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<forms><c path="js.HtmlCollection"><t path="js.Form"/></c></forms>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<domain><c path="String"/></domain>
	<dir><c path="String"/></dir>
	<createTextNode set="method"><f a="text">
	<c path="String"/>
	<t path="js.HtmlDom"/>
</f></createTextNode>
	<createElement set="method"><f a="name">
	<c path="String"/>
	<t path="js.HtmlDom"/>
</f></createElement>
	<cookie><c path="String"/></cookie>
	<close set="method"><f a=""><e path="Void"/></f></close>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<body><t path="js.Body"/></body>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
	<anchors><c path="js.HtmlCollection"><t path="js.Anchor"/></c></anchors>
	<activeElement><t path="js.HtmlDom"/></activeElement>
</a></typedef>
	<typedef path="js.Event" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/js/Dom.hx" module="js.Dom"><a>
	<type><c path="String"/></type>
	<target><t path="js.HtmlDom"/></target>
	<stopPropagation set="method"><f a=""><e path="Void"/></f></stopPropagation>
	<shiftKey><e path="Bool"/></shiftKey>
	<screenY><c path="Int"/></screenY>
	<screenX><c path="Int"/></screenX>
	<keyCode><c path="Int"/></keyCode>
	<ctrlKey><e path="Bool"/></ctrlKey>
	<clientY><c path="Int"/></clientY>
	<clientX><c path="Int"/></clientX>
	<cancelBubble><e path="Bool"/></cancelBubble>
	<button><c path="Int"/></button>
	<altKey><e path="Bool"/></altKey>
</a></typedef>
	<typedef path="js.FileUpload" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/js/Dom.hx" module="js.Dom"><a>
	<value><c path="String"/></value>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<select set="method"><f a=""><e path="Void"/></f></select>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onselect><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselect>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onchange><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onchange>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<form><t path="js.Form"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<defaultValue><c path="String"/></defaultValue>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Form" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/js/Dom.hx" module="js.Dom"><a>
	<title><c path="String"/></title>
	<target><c path="String"/></target>
	<tabIndex><c path="Int"/></tabIndex>
	<submit set="method"><f a=""><e path="Void"/></f></submit>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<reset set="method"><f a=""><e path="Void"/></f></reset>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onsubmit><f a="">
	<t path="js.Event"/>
	<e path="Bool"/>
</f></onsubmit>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onreset><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onreset>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<method><c path="String"/></method>
	<length><c path="Int"/></length>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<enctype><c path="String"/></enctype>
	<encoding><c path="String"/></encoding>
	<elements><c path="js.HtmlCollection"><t path="js.FormElement"/></c></elements>
	<dir><c path="String"/></dir>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
	<action><c path="String"/></action>
	<acceptCharset><c path="String"/></acceptCharset>
</a></typedef>
	<typedef path="js.Frame" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/js/Dom.hx" module="js.Dom"><a>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<src><c path="String"/></src>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<scrolling><c path="String"/></scrolling>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<noResize><e path="Bool"/></noResize>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<marginWidth><c path="String"/></marginWidth>
	<marginHeight><c path="String"/></marginHeight>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<frameBorder><c path="String"/></frameBorder>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<dir><c path="String"/></dir>
	<contentDocument><t path="js.Document"/></contentDocument>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Frameset" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/js/Dom.hx" module="js.Dom"><a>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<rows><c path="Int"/></rows>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<dir><c path="String"/></dir>
	<cols><c path="Int"/></cols>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Hidden" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/js/Dom.hx" module="js.Dom"><a>
	<value><c path="String"/></value>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<select set="method"><f a=""><e path="Void"/></f></select>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onselect><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselect>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onchange><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onchange>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<form><t path="js.Form"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<defaultValue><c path="String"/></defaultValue>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.History" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/js/Dom.hx" module="js.Dom"><a>
	<length><c path="Int"/></length>
	<go set="method"><f a="p">
	<d/>
	<e path="Void"/>
</f></go>
	<forward set="method"><f a=""><e path="Void"/></f></forward>
	<back set="method"><f a=""><e path="Void"/></f></back>
</a></typedef>
	<typedef path="js.IFrame" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/js/Dom.hx" module="js.Dom"><a>
	<width><c path="Int"/></width>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<src><c path="String"/></src>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<scrolling><c path="String"/></scrolling>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<marginWidth><c path="String"/></marginWidth>
	<marginHeight><c path="String"/></marginHeight>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<height><c path="Int"/></height>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<frameBorder><c path="String"/></frameBorder>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<dir><c path="String"/></dir>
	<contentWindow><t path="js.Window"/></contentWindow>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Image" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/js/Dom.hx" module="js.Dom"><a>
	<width><c path="Int"/></width>
	<vspace><c path="Int"/></vspace>
	<useMap><c path="String"/></useMap>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<src><c path="String"/></src>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onload><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onload>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<onerror><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onerror>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<onabort><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onabort>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<lowsrc><c path="String"/></lowsrc>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<isMap><e path="Bool"/></isMap>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hspace><c path="Int"/></hspace>
	<height><c path="Int"/></height>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<dir><c path="String"/></dir>
	<complete><e path="Bool"/></complete>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<border><c path="String"/></border>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
	<alt><c path="String"/></alt>
	<align><c path="String"/></align>
</a></typedef>
	<typedef path="js.Link" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/js/Dom.hx" module="js.Dom"><a>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<target><c path="String"/></target>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<rev><c path="String"/></rev>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<rel><c path="String"/></rel>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onload><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onload>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<media><c path="String"/></media>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hreflang><c path="String"/></hreflang>
	<href><c path="String"/></href>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<charset><c path="String"/></charset>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Location" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/js/Dom.hx" module="js.Dom"><a>
	<search><c path="String"/></search>
	<replace set="method"><f a="url">
	<c path="String"/>
	<e path="Void"/>
</f></replace>
	<reload set="method"><f a="?forceReload">
	<e path="Bool"/>
	<e path="Void"/>
</f></reload>
	<protocol><c path="String"/></protocol>
	<port><c path="Int"/></port>
	<pathname><c path="String"/></pathname>
	<href><c path="String"/></href>
	<hostname><c path="String"/></hostname>
	<host><c path="String"/></host>
	<hash><c path="String"/></hash>
	<assign set="method"><f a="url">
	<c path="String"/>
	<e path="Void"/>
</f></assign>
</a></typedef>
	<typedef path="js.Navigator" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/js/Dom.hx" module="js.Dom"><a>
	<userAgent><c path="String"/></userAgent>
	<taintEnabled set="method"><f a=""><e path="Bool"/></f></taintEnabled>
	<platform><c path="String"/></platform>
	<javaEnabled set="method"><f a=""><e path="Bool"/></f></javaEnabled>
	<cookieEnabled><e path="Bool"/></cookieEnabled>
	<appVersion><c path="String"/></appVersion>
	<appName><c path="String"/></appName>
	<appCodeName><c path="String"/></appCodeName>
</a></typedef>
	<typedef path="js.Option" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/js/Dom.hx" module="js.Dom"><a>
	<value><c path="String"/></value>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<text><c path="String"/></text>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<selected><e path="Bool"/></selected>
	<select set="method"><f a=""><e path="Void"/></f></select>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onselect><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselect>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onchange><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onchange>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<form><t path="js.Form"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<defaultSelected><e path="Bool"/></defaultSelected>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Password" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/js/Dom.hx" module="js.Dom"><a>
	<value><c path="String"/></value>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<size><c path="Int"/></size>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<select set="method"><f a=""><e path="Void"/></f></select>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<readOnly><e path="Bool"/></readOnly>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onselect><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselect>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onchange><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onchange>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<maxLength><c path="Int"/></maxLength>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<form><t path="js.Form"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<defaultValue><c path="String"/></defaultValue>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Radio" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/js/Dom.hx" module="js.Dom"><a>
	<value><c path="String"/></value>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<size><c path="Int"/></size>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<select set="method"><f a=""><e path="Void"/></f></select>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onselect><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselect>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onchange><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onchange>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<form><t path="js.Form"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<defaultChecked><e path="Bool"/></defaultChecked>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<checked><e path="Bool"/></checked>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Reset" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/js/Dom.hx" module="js.Dom"><a>
	<value><c path="String"/></value>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<select set="method"><f a=""><e path="Void"/></f></select>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onselect><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselect>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onchange><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onchange>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<form><t path="js.Form"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Screen" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/js/Dom.hx" module="js.Dom"><a>
	<width><c path="Int"/></width>
	<height><c path="Int"/></height>
	<colorDepth><c path="Int"/></colorDepth>
	<availWidth><c path="Int"/></availWidth>
	<availHeight><c path="Int"/></availHeight>
</a></typedef>
	<typedef path="js.Select" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/js/Dom.hx" module="js.Dom"><a>
	<value><c path="String"/></value>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<size><c path="Int"/></size>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<selectedIndex><c path="Int"/></selectedIndex>
	<select set="method"><f a=""><e path="Void"/></f></select>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<remove set="method"><f a="o">
	<c path="Int"/>
	<e path="Void"/>
</f></remove>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<options><c path="js.HtmlCollection"><t path="js.Option"/></c></options>
	<onselect><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselect>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onchange><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onchange>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<multiple><e path="Bool"/></multiple>
	<length><c path="Int"/></length>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<form><t path="js.Form"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Style" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/js/Dom.hx" module="js.Dom"><a>
	<zoom><d/></zoom>
	<zIndex><c path="Int"/></zIndex>
	<writingMode><d/></writingMode>
	<wordWrap><d/></wordWrap>
	<wordSpacing><d/></wordSpacing>
	<wordBreak><d/></wordBreak>
	<width><c path="String"/></width>
	<whiteSpace><d/></whiteSpace>
	<visibility><d/></visibility>
	<verticalAlign><d/></verticalAlign>
	<unicodeBidi><d/></unicodeBidi>
	<top><c path="String"/></top>
	<textUnderlinePosition><d/></textUnderlinePosition>
	<textTransform><d/></textTransform>
	<textShadow><d/></textShadow>
	<textOverflow><d/></textOverflow>
	<textKashidaSpace><d/></textKashidaSpace>
	<textJustifyTrim><d/></textJustifyTrim>
	<textJustify><d/></textJustify>
	<textIndent><d/></textIndent>
	<textDecorationLineUnderline><d/></textDecorationLineUnderline>
	<textDecorationLineThrough><d/></textDecorationLineThrough>
	<textDecorationLineOverline><d/></textDecorationLineOverline>
	<textDecorationLineNone><d/></textDecorationLineNone>
	<textDecorationBlink><d/></textDecorationBlink>
	<textDecoration><d/></textDecoration>
	<textAutospace><d/></textAutospace>
	<textAlignLast><d/></textAlignLast>
	<textAlign><d/></textAlign>
	<styleFloat><d/></styleFloat>
	<rubyPosition><d/></rubyPosition>
	<rubyOverhang><d/></rubyOverhang>
	<rubyAlign><d/></rubyAlign>
	<right><c path="String"/></right>
	<quotes><d/></quotes>
	<position><d/></position>
	<paddingTop><d/></paddingTop>
	<paddingRight><d/></paddingRight>
	<paddingLeft><d/></paddingLeft>
	<paddingBottom><d/></paddingBottom>
	<padding><d/></padding>
	<overflowY><d/></overflowY>
	<overflowX><d/></overflowX>
	<overflow><d/></overflow>
	<outlineWidth><d/></outlineWidth>
	<outlineStyle><d/></outlineStyle>
	<outlineColor><d/></outlineColor>
	<outline><d/></outline>
	<minWidth><d/></minWidth>
	<minHeight><d/></minHeight>
	<maxWidth><d/></maxWidth>
	<maxHeight><d/></maxHeight>
	<marks><d/></marks>
	<markerOffset><d/></markerOffset>
	<marginTop><d/></marginTop>
	<marginRight><d/></marginRight>
	<marginLeft><d/></marginLeft>
	<marginBottom><d/></marginBottom>
	<margin><d/></margin>
	<listStyleType><c path="String"/></listStyleType>
	<listStylePosition><d/></listStylePosition>
	<listStyleImage><d/></listStyleImage>
	<listStyle><d/></listStyle>
	<lineHeight><d/></lineHeight>
	<lineBreak><d/></lineBreak>
	<letterSpacing><d/></letterSpacing>
	<left><c path="String"/></left>
	<height><c path="String"/></height>
	<fontWeight><d/></fontWeight>
	<fontVariant><d/></fontVariant>
	<fontStyle><d/></fontStyle>
	<fontStretch><d/></fontStretch>
	<fontSizeAdjust><d/></fontSizeAdjust>
	<fontSize><d/></fontSize>
	<fontFamily><d/></fontFamily>
	<font><d/></font>
	<display><d/></display>
	<direction><d/></direction>
	<cursor><d/></cursor>
	<cssText><d/></cssText>
	<cssFloat><d/></cssFloat>
	<counterReset><d/></counterReset>
	<counterIncrement><d/></counterIncrement>
	<content><d/></content>
	<color><d/></color>
	<clipTop><d/></clipTop>
	<clipRight><d/></clipRight>
	<clipLeft><d/></clipLeft>
	<clipBottom><d/></clipBottom>
	<clip><d/></clip>
	<clear><c path="String"/></clear>
	<bottom><c path="String"/></bottom>
	<borderWidth><d/></borderWidth>
	<borderTopWidth><d/></borderTopWidth>
	<borderTopStyle><d/></borderTopStyle>
	<borderTopColor><d/></borderTopColor>
	<borderTop><d/></borderTop>
	<borderStyle><c path="String"/></borderStyle>
	<borderRightWidth><d/></borderRightWidth>
	<borderRightStyle><d/></borderRightStyle>
	<borderRightColor><d/></borderRightColor>
	<borderRight><d/></borderRight>
	<borderLeftWidth><d/></borderLeftWidth>
	<borderLeftStyle><d/></borderLeftStyle>
	<borderLeftColor><d/></borderLeftColor>
	<borderLeft><d/></borderLeft>
	<borderColor><d/></borderColor>
	<borderBottomWidth><d/></borderBottomWidth>
	<borderBottomStyle><d/></borderBottomStyle>
	<borderBottomColor><d/></borderBottomColor>
	<borderBottom><d/></borderBottom>
	<border><d/></border>
	<backgroundRepeat><d/></backgroundRepeat>
	<backgroundPosition><d/></backgroundPosition>
	<backgroundImage><d/></backgroundImage>
	<backgroundColor><d/></backgroundColor>
	<backgroundAttachment><d/></backgroundAttachment>
	<background><d/></background>
</a></typedef>
	<typedef path="js.StyleSheet" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/js/Dom.hx" module="js.Dom"><a>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<href><c path="String"/></href>
	<disabled><e path="Bool"/></disabled>
</a></typedef>
	<typedef path="js.Submit" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/js/Dom.hx" module="js.Dom"><a>
	<value><c path="String"/></value>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<select set="method"><f a=""><e path="Void"/></f></select>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onselectstart><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselectstart>
	<onselect><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselect>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onchange><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onchange>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<form><t path="js.Form"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Text" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/js/Dom.hx" module="js.Dom"><a>
	<value><c path="String"/></value>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<size><c path="Int"/></size>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<select set="method"><f a=""><e path="Void"/></f></select>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<readOnly><e path="Bool"/></readOnly>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onselect><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselect>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onchange><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onchange>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<maxLength><c path="Int"/></maxLength>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<form><t path="js.Form"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<defaultValue><c path="String"/></defaultValue>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Textarea" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/js/Dom.hx" module="js.Dom"><a>
	<value><c path="String"/></value>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<select set="method"><f a=""><e path="Void"/></f></select>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<rows><c path="Int"/></rows>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<readOnly><e path="Bool"/></readOnly>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onselect><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselect>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onchange><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onchange>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<form><t path="js.Form"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<defaultValue><c path="String"/></defaultValue>
	<cols><c path="Int"/></cols>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Window" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/js/Dom.hx" module="js.Dom"><a>
	<top><t path="js.Window"/></top>
	<status><c path="String"/></status>
	<self><t path="js.Window"/></self>
	<scrollTo set="method"><f a="x:y">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></scrollTo>
	<scrollBy set="method"><f a="dx:dy">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></scrollBy>
	<screen><t path="js.Screen"/></screen>
	<prompt set="method"><f a="msg:?def">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></prompt>
	<print set="method"><f a=""><e path="Void"/></f></print>
	<parent><t path="js.Window"/></parent>
	<outerWidth><c path="Int"/></outerWidth>
	<outerHeight><c path="Int"/></outerHeight>
	<opener><t path="js.Window"/></opener>
	<open set="method"><f a="url:?name:?features">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<t path="js.Window"/>
</f></open>
	<onunload><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onunload>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onload><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onload>
	<onerror><f a="::">
	<c path="String"/>
	<c path="String"/>
	<c path="Int"/>
	<e path="Bool"/>
</f></onerror>
	<navigator><t path="js.Navigator"/></navigator>
	<name><c path="String"/></name>
	<moveTo set="method"><f a="x:y">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></moveTo>
	<moveBy set="method"><f a="dx:dy">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></moveBy>
	<location><t path="js.Location"/></location>
	<length><c path="Int"/></length>
	<innerWidth><c path="Int"/></innerWidth>
	<innerHeight><c path="Int"/></innerHeight>
	<history><t path="js.History"/></history>
	<frames><c path="js.HtmlCollection"><t path="js.Frame"/></c></frames>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<document><t path="js.Document"/></document>
	<defaultStatus><c path="String"/></defaultStatus>
	<confirm set="method"><f a="msg">
	<c path="String"/>
	<e path="Bool"/>
</f></confirm>
	<closed><e path="Bool"/></closed>
	<close set="method"><f a=""><e path="Void"/></f></close>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<alert set="method"><f a="msg">
	<c path="String"/>
	<e path="Void"/>
</f></alert>
</a></typedef>
	<typedef path="js.JqEvent" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/js/JQuery.hx" module="js.JQuery"><a>
	<which><c path="Int"/></which>
	<wheelDelta><c path="Int"/></wheelDelta>
	<type><c path="String"/></type>
	<timeStamp><c path="Int"/></timeStamp>
	<target><t path="js.HtmlDom"/></target>
	<stopPropagation set="method"><f a=""><e path="Void"/></f></stopPropagation>
	<stopImmediatePropagation set="method"><f a=""><e path="Void"/></f></stopImmediatePropagation>
	<shiftKey><e path="Bool"/></shiftKey>
	<relatedTarget><t path="js.HtmlDom"/></relatedTarget>
	<preventDefault set="method"><f a=""><e path="Void"/></f></preventDefault>
	<pageY><c path="Int"/></pageY>
	<pageX><c path="Int"/></pageX>
	<metaKey><e path="Bool"/></metaKey>
	<keyCode><c path="Int"/></keyCode>
	<isPropationStopped set="method"><f a=""><e path="Bool"/></f></isPropationStopped>
	<isImmediatePropagationStopped set="method"><f a=""><e path="Bool"/></f></isImmediatePropagationStopped>
	<isDefaultPrevented set="method"><f a=""><e path="Bool"/></f></isDefaultPrevented>
	<currentTarget><t path="js.HtmlDom"/></currentTarget>
	<ctrlKey><e path="Bool"/></ctrlKey>
	<charCode><c path="Int"/></charCode>
	<altKey><e path="Bool"/></altKey>
</a></typedef>
	<class path="js.JQuery" params="" file="Z:\3Work\Haxe-2.10\Haxe/std/js/JQuery.hx" extern="1">
		<cur public="1" get="getCurrent" set="null" static="1">
			<c path="js.JQuery"/>
			<haxe_doc>Return the current JQuery element (in a callback), similar to $(this) in JS.</haxe_doc>
		</cur>
		<fx public="1" set="null" static="1"><a>
	<off><e path="Bool"/></off>
	<interval><c path="Int"/></interval>
</a></fx>
		<browser public="1" set="null" static="1"><a>
	<webkit><e path="Bool"/></webkit>
	<version><c path="String"/></version>
	<opera><e path="Bool"/></opera>
	<msie><e path="Bool"/></msie>
	<mozilla><e path="Bool"/></mozilla>
</a></browser>
		<contains public="1" set="method" static="1"><f a="parent:child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Bool"/>
</f></contains>
		<noConflict public="1" set="method" static="1"><f a="?removeAll">
	<e path="Bool"/>
	<e path="Void"/>
</f></noConflict>
		<parseJSON public="1" set="method" static="1"><f a="json">
	<c path="String"/>
	<d/>
</f></parseJSON>
		<globalEval public="1" set="method" static="1"><f a="js">
	<c path="String"/>
	<e path="Void"/>
</f></globalEval>
		<getCurrent get="inline" set="null" line="343" static="1"><f a=""><c path="js.JQuery"/></f></getCurrent>
		<iterator public="1" get="inline" set="null" line="320">
			<f a=""><t path="Iterator"><c path="js.JQuery"/></t></f>
			<meta><m n=":runtime"/></meta>
		</iterator>
		<serializeArray public="1" set="method"><f a=""><c path="Array"><a>
	<value><c path="String"/></value>
	<name><c path="String"/></name>
</a></c></f></serializeArray>
		<serialize public="1" set="method"><f a=""><c path="String"/></f></serialize>
		<removeData public="1" set="method"><f a="?key">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></removeData>
		<data public="1" params="T" set="method"><f a="key:?value">
	<c path="String"/>
	<c path="data.T"/>
	<c path="data.T"/>
</f></data>
		<is public="1" set="method"><f a="selector">
	<c path="String"/>
	<e path="Bool"/>
</f></is>
		<get public="1" set="method"><f a=""><c path="Array"><t path="js.HtmlDom"/></c></f></get>
		<queue public="1" set="method"><f a="?queueName:?callb">
	<c path="String"/>
	<f a="">
		<f a=""><e path="Void"/></f>
		<e path="Void"/>
	</f>
	<a><length><c path="Int"/></length></a>
</f></queue>
		<dequeue public="1" set="method"><f a="?queueName">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></dequeue>
		<clearQueue public="1" set="method"><f a="?queueName">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></clearQueue>
		<undelegate public="1" set="method"><f a="?selector:?events:?callb">
	<c path="String"/>
	<c path="String"/>
	<f a="">
		<t path="js.JqEvent"/>
		<e path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></undelegate>
		<unbind public="1" set="method"><f a="?events:?callb">
	<c path="String"/>
	<f a="">
		<t path="js.JqEvent"/>
		<e path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></unbind>
		<triggerHandler public="1" set="method"><f a="events">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></triggerHandler>
		<trigger public="1" set="method"><f a="events">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></trigger>
		<live public="1" set="method"><f a="events:callb">
	<c path="String"/>
	<f a="">
		<t path="js.JqEvent"/>
		<e path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></live>
		<one public="1" set="method"><f a="events:callb">
	<c path="String"/>
	<f a="">
		<t path="js.JqEvent"/>
		<e path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></one>
		<die public="1" set="method"><f a="?events:?callb">
	<c path="String"/>
	<f a="">
		<t path="js.JqEvent"/>
		<e path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></die>
		<delegate public="1" set="method"><f a="selector:events:callb">
	<c path="String"/>
	<c path="String"/>
	<f a="">
		<t path="js.JqEvent"/>
		<e path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></delegate>
		<bind public="1" set="method"><f a="events:callb">
	<c path="String"/>
	<f a="">
		<t path="js.JqEvent"/>
		<e path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></bind>
		<unload public="1" set="method"><f a="?callb">
	<f a="">
		<t path="js.JqEvent"/>
		<e path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></unload>
		<submit public="1" set="method"><f a="?callb">
	<f a="">
		<t path="js.JqEvent"/>
		<e path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></submit>
		<select public="1" set="method"><f a="?callb">
	<f a="">
		<t path="js.JqEvent"/>
		<e path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></select>
		<scroll public="1" set="method"><f a="?callb">
	<f a="">
		<t path="js.JqEvent"/>
		<e path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></scroll>
		<resize public="1" set="method"><f a="?callb">
	<f a="">
		<t path="js.JqEvent"/>
		<e path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></resize>
		<ready public="1" set="method"><f a="callb">
	<f a="">
		<t path="js.JqEvent"/>
		<e path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></ready>
		<load public="1" set="method"><f a="?callb">
	<f a="">
		<t path="js.JqEvent"/>
		<e path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></load>
		<mouseup public="1" set="method"><f a="?callb">
	<f a="">
		<t path="js.JqEvent"/>
		<e path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></mouseup>
		<mousemove public="1" set="method"><f a="?callb">
	<f a="">
		<t path="js.JqEvent"/>
		<e path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></mousemove>
		<mouseover public="1" set="method"><f a="?callb">
	<f a="">
		<t path="js.JqEvent"/>
		<e path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></mouseover>
		<mouseout public="1" set="method"><f a="?callb">
	<f a="">
		<t path="js.JqEvent"/>
		<e path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></mouseout>
		<mouseleave public="1" set="method"><f a="?callb">
	<f a="">
		<t path="js.JqEvent"/>
		<e path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></mouseleave>
		<mouseenter public="1" set="method"><f a="?callb">
	<f a="">
		<t path="js.JqEvent"/>
		<e path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></mouseenter>
		<mousedown public="1" set="method"><f a="?callb">
	<f a="">
		<t path="js.JqEvent"/>
		<e path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></mousedown>
		<keyup public="1" set="method"><f a="?callb">
	<f a="">
		<t path="js.JqEvent"/>
		<e path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></keyup>
		<keypress public="1" set="method"><f a="?callb">
	<f a="">
		<t path="js.JqEvent"/>
		<e path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></keypress>
		<keydown public="1" set="method"><f a="?callb">
	<f a="">
		<t path="js.JqEvent"/>
		<e path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></keydown>
		<hover public="1" set="method"><f a="onOver:?onOut">
	<f a="">
		<t path="js.JqEvent"/>
		<e path="Void"/>
	</f>
	<f a=""><e path="Void"/></f>
	<c path="js.JQuery"/>
</f></hover>
		<focusout public="1" set="method"><f a="?callb">
	<f a="">
		<t path="js.JqEvent"/>
		<e path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></focusout>
		<focusin public="1" set="method"><f a="?callb">
	<f a="">
		<t path="js.JqEvent"/>
		<e path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></focusin>
		<focus public="1" set="method"><f a="?callb">
	<f a="">
		<t path="js.JqEvent"/>
		<e path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></focus>
		<error public="1" set="method"><f a="?callb">
	<f a="">
		<t path="js.JqEvent"/>
		<e path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></error>
		<dblclick public="1" set="method"><f a="?callb">
	<f a="">
		<t path="js.JqEvent"/>
		<e path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></dblclick>
		<click public="1" set="method"><f a="?callb">
	<f a="">
		<t path="js.JqEvent"/>
		<e path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></click>
		<change public="1" set="method"><f a="?callb">
	<f a="">
		<t path="js.JqEvent"/>
		<e path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></change>
		<blur public="1" set="method"><f a="?callb">
	<f a="">
		<t path="js.JqEvent"/>
		<e path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></blur>
		<toggle public="1" set="method"><f a="?duration:?call">
	<c path="Int"/>
	<f a=""><e path="Void"/></f>
	<c path="js.JQuery"/>
</f></toggle>
		<stop public="1" set="method"><f a="?clearQueue:?jumpToEnd">
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="js.JQuery"/>
</f></stop>
		<slideUp public="1" set="method"><f a="?duration:?call">
	<c path="Int"/>
	<f a=""><e path="Void"/></f>
	<c path="js.JQuery"/>
</f></slideUp>
		<slideToggle public="1" set="method"><f a="?duration:?call">
	<c path="Int"/>
	<f a=""><e path="Void"/></f>
	<c path="js.JQuery"/>
</f></slideToggle>
		<slideDown public="1" set="method"><f a="?duration:?call">
	<c path="Int"/>
	<f a=""><e path="Void"/></f>
	<c path="js.JQuery"/>
</f></slideDown>
		<show public="1" set="method"><f a="?duration:?call">
	<c path="Int"/>
	<f a=""><e path="Void"/></f>
	<c path="js.JQuery"/>
</f></show>
		<fadeToggle public="1" set="method"><f a="?duration:?call">
	<c path="Int"/>
	<f a=""><e path="Void"/></f>
	<c path="js.JQuery"/>
</f></fadeToggle>
		<fadeTo public="1" set="method"><f a="duration:opacity:?call">
	<c path="Int"/>
	<c path="Float"/>
	<f a=""><e path="Void"/></f>
	<c path="js.JQuery"/>
</f></fadeTo>
		<fadeOut public="1" set="method"><f a="?duration:?call">
	<c path="Int"/>
	<f a=""><e path="Void"/></f>
	<c path="js.JQuery"/>
</f></fadeOut>
		<fadeIn public="1" set="method"><f a="?duration:?call">
	<c path="Int"/>
	<f a=""><e path="Void"/></f>
	<c path="js.JQuery"/>
</f></fadeIn>
		<hide public="1" set="method"><f a="?duration:?call">
	<c path="Int"/>
	<f a=""><e path="Void"/></f>
	<c path="js.JQuery"/>
</f></hide>
		<delay public="1" set="method"><f a="duration:?queueName">
	<c path="Int"/>
	<c path="String"/>
	<c path="js.JQuery"/>
</f></delay>
		<animate public="1" set="method"><f a="properties:?duration:?callb">
	<a/>
	<c path="Int"/>
	<f a=""><e path="Void"/></f>
	<c path="js.JQuery"/>
</f></animate>
		<wrapInner public="1" set="method"><f a="html">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></wrapInner>
		<wrapAll public="1" set="method"><f a="html">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></wrapAll>
		<wrap public="1" set="method"><f a="html">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></wrap>
		<unwrap public="1" set="method"><f a=""><c path="js.JQuery"/></f></unwrap>
		<replaceWith public="1" set="method"><f a="html">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></replaceWith>
		<replaceAll public="1" set="method"><f a="selector">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></replaceAll>
		<remove public="1" set="method"><f a="?selector">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></remove>
		<prependTo public="1" set="method"><f a="html">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></prependTo>
		<prepend public="1" set="method"><f a="html">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></prepend>
		<insertAfter public="1" set="method"><f a="html">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></insertAfter>
		<insertBefore public="1" set="method"><f a="html">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></insertBefore>
		<empty public="1" set="method"><f a=""><c path="js.JQuery"/></f></empty>
		<detach public="1" set="method"><f a="?selector">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></detach>
		<appendTo public="1" set="method"><f a="html">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></appendTo>
		<append public="1" set="method"><f a="html">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></append>
		<after public="1" set="method"><f a="html">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></after>
		<before public="1" set="method"><f a="html">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></before>
		<toArray public="1" set="method"><f a=""><c path="Array"><t path="js.HtmlDom"/></c></f></toArray>
		<slice public="1" set="method"><f a="start:?end">
	<c path="Int"/>
	<c path="Int"/>
	<c path="js.JQuery"/>
</f></slice>
		<size public="1" set="method"><f a=""><c path="Int"/></f></size>
		<siblings public="1" set="method"><f a="?selector">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></siblings>
		<pushStack public="1" set="method"><f a="elements">
	<c path="Array"><t path="js.HtmlDom"/></c>
	<c path="js.JQuery"/>
</f></pushStack>
		<prevUntil public="1" set="method"><f a="?selector">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></prevUntil>
		<prevAll public="1" set="method"><f a="?selector">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></prevAll>
		<prev public="1" set="method"><f a="?selector">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></prev>
		<not public="1" set="method"><f a="selector">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></not>
		<parentsUntil public="1" set="method"><f a="?selector">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></parentsUntil>
		<parents public="1" set="method"><f a="?selector">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></parents>
		<parent public="1" set="method"><f a="?selector">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></parent>
		<nextUntil public="1" set="method"><f a="?selector">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></nextUntil>
		<nextAll public="1" set="method"><f a="?selector">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></nextAll>
		<next public="1" set="method"><f a="?selector">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></next>
		<has public="1" set="method"><f a="selector">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></has>
		<last public="1" set="method"><f a="?selector">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></last>
		<index public="1" set="method"><f a="?selector">
	<c path="String"/>
	<c path="Int"/>
</f></index>
		<first public="1" set="method"><f a=""><c path="js.JQuery"/></f></first>
		<find public="1" set="method"><f a="selector">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></find>
		<filter public="1" set="method"><f a="selector">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></filter>
		<eq public="1" set="method"><f a="index">
	<c path="Int"/>
	<c path="js.JQuery"/>
</f></eq>
		<end public="1" set="method"><f a=""><c path="js.JQuery"/></f></end>
		<each public="1" set="method"><f a="f">
	<f a=""><e path="Void"/></f>
	<c path="js.JQuery"/>
</f></each>
		<contents public="1" set="method"><f a=""><c path="js.JQuery"/></f></contents>
		<closest public="1" set="method"><f a="selector:?context">
	<c path="String"/>
	<c path="js.JQuery"/>
	<c path="js.JQuery"/>
</f></closest>
		<clone public="1" set="method"><f a="?withDataAndEvents">
	<e path="Bool"/>
	<c path="js.JQuery"/>
</f></clone>
		<children public="1" set="method"><f a="?selector">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></children>
		<andSelf public="1" set="method"><f a=""><c path="js.JQuery"/></f></andSelf>
		<add public="1" set="method"><f a="selector:?context">
	<c path="String"/>
	<c path="js.JQuery"/>
	<c path="js.JQuery"/>
</f></add>
		<position public="1" set="method"><f a=""><a>
	<top><c path="Int"/></top>
	<left><c path="Int"/></left>
</a></f></position>
		<offsetParent public="1" set="method"><f a=""><c path="js.JQuery"/></f></offsetParent>
		<offset public="1" set="method"><f a=""><a>
	<top><c path="Int"/></top>
	<left><c path="Int"/></left>
</a></f></offset>
		<scrollTop public="1" set="method"><f a=""><c path="Int"/></f></scrollTop>
		<scrollLeft public="1" set="method"><f a=""><c path="Int"/></f></scrollLeft>
		<outerHeight public="1" set="method"><f a="?includeMargin">
	<e path="Bool"/>
	<c path="Int"/>
</f></outerHeight>
		<outerWidth public="1" set="method"><f a="?includeMargin">
	<e path="Bool"/>
	<c path="Int"/>
</f></outerWidth>
		<innerHeight public="1" set="method"><f a=""><c path="Int"/></f></innerHeight>
		<innerWidth public="1" set="method"><f a=""><c path="Int"/></f></innerWidth>
		<height public="1" set="method"><f a=""><c path="Int"/></f></height>
		<width public="1" set="method"><f a=""><c path="Int"/></f></width>
		<text public="1" set="method"><f a=""><c path="String"/></f></text>
		<val public="1" set="method"><f a=""><c path="String"/></f></val>
		<html public="1" set="method"><f a=""><c path="String"/></f></html>
		<css public="1" set="method"><f a="prop">
	<c path="String"/>
	<c path="String"/>
</f></css>
		<prop public="1" set="method"><f a="name">
	<c path="String"/>
	<d/>
</f></prop>
		<removeAttr public="1" set="method"><f a="attr">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></removeAttr>
		<attr public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="String"/>
</f></attr>
		<toggleClass public="1" set="method"><f a="className:?addRemove">
	<c path="String"/>
	<e path="Bool"/>
	<c path="js.JQuery"/>
</f></toggleClass>
		<hasClass public="1" set="method"><f a="className">
	<c path="String"/>
	<e path="Bool"/>
</f></hasClass>
		<removeClass public="1" set="method"><f a="?className">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></removeClass>
		<addClass public="1" set="method"><f a="className">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></addClass>
		<length public="1" set="null"><c path="Int"/></length>
		<context public="1" set="null"><t path="js.HtmlDom"/></context>
		<new public="1" set="method"><f a="html">
	<c path="String"/>
	<e path="Void"/>
</f></new>
		<meta><m n=":initPackage"/></meta>
	</class>
	<class path="ui.App" params="" file="haxe_src/ui/App.hx">
		<LOGGER public="1" static="1"><c path="ui.log.Logga"/></LOGGER>
		<CONNECTIONS public="1" static="1"><c path="ui.observable.ObservableSet"><c path="ui.model.Connection"/></c></CONNECTIONS>
		<main public="1" set="method" line="26" static="1"><f a=""><e path="Void"/></f></main>
		<start public="1" set="method" line="33" static="1"><f a=""><e path="Void"/></f></start>
		<demo set="method" line="122" static="1"><f a=""><e path="Void"/></f></demo>
	</class>
	<class path="ui.CrossMojo" params="" file="haxe_src/ui/CrossMojo.hx">
		<jq public="1" set="method" line="7" static="1"><f a="selector:?arg2">
	<d/>
	<c path="js.JQuery"/>
	<c path="ui.jq.JQ"/>
</f></jq>
		<windowConsole public="1" get="inline" set="null" line="17" static="1"><f a=""><d/></f></windowConsole>
		<confirm public="1" get="inline" set="null" line="21" static="1"><f a=""><f a="">
	<c path="String"/>
	<e path="Bool"/>
</f></f></confirm>
	</class>
	<class path="ui.exception.Exception" params="" file="haxe_src/ui/exception/Exception.hx">
		<messageList public="1" set="method" line="52"><f a=""><c path="List"><c path="String"/></c></f></messageList>
		<stackTrace public="1" set="method" line="39"><f a=""><c path="String"/></f></stackTrace>
		<chain public="1" set="method" line="27">
			<f a=""><c path="Array"><c path="ui.exception.Exception"/></c></f>
			<haxe_doc>chain of exceptions with this one first</haxe_doc>
		</chain>
		<rootCause public="1" set="method" line="19"><f a=""><c path="ui.exception.Exception"/></f></rootCause>
		<message public="1"><c path="String"/></message>
		<cause public="1"><c path="ui.exception.Exception"/></cause>
		<callStack public="1"><c path="Array"><e path="haxe.StackItem"/></c></callStack>
		<new public="1" set="method" line="13"><f a="?message:?cause">
	<c path="String"/>
	<c path="ui.exception.Exception"/>
	<e path="Void"/>
</f></new>
	</class>
	<typedef path="ui.helper.ArrayComparison" params="" file="haxe_src/ui/helper/ArrayHelper.hx" module="ui.helper.ArrayHelper"><a>
	<value><d/></value>
	<propOrFcn><d/></propOrFcn>
</a></typedef>
	<class path="ui.helper.ArrayHelper" params="" file="haxe_src/ui/helper/ArrayHelper.hx">
		<indexOf public="1" params="T" set="method" line="12" static="1"><f a="array:t">
	<c path="Array"><c path="indexOf.T"/></c>
	<c path="indexOf.T"/>
	<c path="Int"/>
</f></indexOf>
		<indexOfComplex public="1" set="method" line="24" static="1"><f a="array:value:propOrFcn:?startingIndex">
	<c path="Array"><d/></c>
	<d/>
	<d/>
	<c path="Int"/>
	<c path="Int"/>
</f></indexOfComplex>
		<indexOfComplexInSubArray public="1" set="method" line="44" static="1"><f a="array:value:subArrayProp:?startingIndex">
	<c path="Array"><d/></c>
	<d/>
	<c path="String"/>
	<c path="Int"/>
	<c path="Int"/>
</f></indexOfComplexInSubArray>
		<indexOfArrayComparison public="1" params="T" set="method" line="57" static="1"><f a="array:comparison:?startingIndex">
	<c path="Array"><c path="indexOfArrayComparison.T"/></c>
	<c path="Array"><t path="ui.helper.ArrayComparison"/></c>
	<c path="Int"/>
	<c path="Int"/>
</f></indexOfArrayComparison>
		<getElementComplex public="1" params="T" set="method" line="90" static="1"><f a="array:value:propOrFcn:?startingIndex">
	<c path="Array"><c path="getElementComplex.T"/></c>
	<d/>
	<d/>
	<c path="Int"/>
	<c path="getElementComplex.T"/>
</f></getElementComplex>
		<getElementComplexInSubArray public="1" params="T" set="method" line="108" static="1"><f a="array:value:subArrayProp:?startingIndex">
	<c path="Array"><c path="getElementComplexInSubArray.T"/></c>
	<d/>
	<c path="String"/>
	<c path="Int"/>
	<c path="getElementComplexInSubArray.T"/>
</f></getElementComplexInSubArray>
		<getElementArrayComparison public="1" params="T" set="method" line="121" static="1"><f a="array:comparison:?startingIndex">
	<c path="Array"><c path="getElementArrayComparison.T"/></c>
	<c path="Array"><t path="ui.helper.ArrayComparison"/></c>
	<c path="Int"/>
	<c path="getElementArrayComparison.T"/>
</f></getElementArrayComparison>
		<contains public="1" params="T" set="method" line="154" static="1"><f a="array:value">
	<c path="Array"><c path="contains.T"/></c>
	<c path="contains.T"/>
	<e path="Bool"/>
</f></contains>
		<containsAny public="1" params="T" set="method" line="160" static="1"><f a="array:valueArray">
	<c path="Array"><c path="containsAny.T"/></c>
	<c path="Array"><c path="containsAny.T"/></c>
	<e path="Bool"/>
</f></containsAny>
		<containsAll public="1" params="T" set="method" line="172" static="1"><f a="array:valueArray">
	<c path="Array"><c path="containsAll.T"/></c>
	<c path="Array"><c path="containsAll.T"/></c>
	<e path="Bool"/>
</f></containsAll>
		<containsComplex public="1" params="T" set="method" line="185" static="1"><f a="array:value:propOrFcn:?startingIndex">
	<c path="Array"><c path="containsComplex.T"/></c>
	<d/>
	<d/>
	<c path="Int"/>
	<e path="Bool"/>
</f></containsComplex>
		<containsComplexInSubArray public="1" params="T" set="method" line="191" static="1"><f a="array:value:subArrayProp:?startingIndex">
	<c path="Array"><c path="containsComplexInSubArray.T"/></c>
	<d/>
	<c path="String"/>
	<c path="Int"/>
	<e path="Bool"/>
</f></containsComplexInSubArray>
		<containsArrayComparison public="1" params="T" set="method" line="197" static="1"><f a="array:comparison:?startingIndex">
	<c path="Array"><c path="containsArrayComparison.T"/></c>
	<c path="Array"><t path="ui.helper.ArrayComparison"/></c>
	<c path="Int"/>
	<e path="Bool"/>
</f></containsArrayComparison>
		<hasValues public="1" params="T" set="method" line="203" static="1"><f a="array">
	<c path="Array"><c path="hasValues.T"/></c>
	<e path="Bool"/>
</f></hasValues>
		<joinX public="1" set="method" line="207" static="1"><f a="array:sep">
	<c path="Array"><c path="String"/></c>
	<c path="String"/>
	<c path="String"/>
</f></joinX>
	</class>
	<class path="ui.helper.StringHelper" params="" file="haxe_src/ui/helper/StringHelper.hx">
		<compare public="1" set="method" line="9" static="1"><f a="left:right">
	<c path="String"/>
	<c path="String"/>
	<c path="Int"/>
</f></compare>
		<extractLast public="1" set="method" line="15" static="1"><f a="term:?splitValue">
	<c path="String"/>
	<d/>
	<c path="String"/>
</f></extractLast>
		<replaceAll public="1" set="method" line="25" static="1"><f a="original:sub:by">
	<c path="String"/>
	<d/>
	<c path="String"/>
	<c path="String"/>
</f></replaceAll>
		<replaceLast public="1" set="method" line="39" static="1"><f a="original:newLastTerm:?splitValue">
	<c path="String"/>
	<c path="String"/>
	<d/>
	<c path="String"/>
</f></replaceLast>
		<capitalizeFirstLetter public="1" set="method" line="46" static="1"><f a="str">
	<c path="String"/>
	<c path="String"/>
</f></capitalizeFirstLetter>
		<isBlank public="1" set="method" line="50" static="1"><f a="str">
	<c path="String"/>
	<e path="Bool"/>
</f></isBlank>
		<isNotBlank public="1" set="method" line="54" static="1"><f a="str">
	<c path="String"/>
	<e path="Bool"/>
</f></isNotBlank>
		<padLeft public="1" set="method" line="58" static="1"><f a="baseString:minChars:padChar">
	<c path="String"/>
	<c path="Int"/>
	<c path="String"/>
	<c path="String"/>
</f></padLeft>
		<padRight public="1" set="method" line="69" static="1"><f a="baseString:minChars:padChar">
	<c path="String"/>
	<c path="Int"/>
	<c path="String"/>
	<c path="String"/>
</f></padRight>
		<trimLeft public="1" set="method" line="80" static="1"><f a="s:?minChars:?trimChars">
	<c path="String"/>
	<c path="Int"/>
	<c path="String"/>
	<c path="String"/>
</f></trimLeft>
		<trimRight public="1" set="method" line="91" static="1"><f a="s:?minChars:?trimChars">
	<c path="String"/>
	<c path="Int"/>
	<c path="String"/>
	<c path="String"/>
</f></trimRight>
		<contains public="1" set="method" line="102" static="1"><f a="baseString:str">
	<c path="String"/>
	<c path="String"/>
	<e path="Bool"/>
</f></contains>
		<splitByReg public="1" set="method" line="107" static="1"><f a="baseString:reg">
	<c path="String"/>
	<c path="EReg"/>
	<c path="Array"><c path="String"/></c>
</f></splitByReg>
	</class>
	<typedef path="ui.jq.AjaxOptions" params="" file="haxe_src/ui/jq/JQ.hx" module="ui.jq.JQ"><a>
	<url>
		<c path="String"/>
		<meta><m n=":optional"/></meta>
	</url>
	<type>
		<c path="String"/>
		<meta><m n=":optional"/></meta>
	</type>
	<success>
		<f a="::">
			<d/>
			<d/>
			<d/>
			<e path="Void"/>
		</f>
		<meta><m n=":optional"/></meta>
		<haxe_doc>function(data:Dynamic, textStatus:Dynamic, jqXHR:Dynamic)</haxe_doc>
	</success>
	<error>
		<f a="::">
			<d/>
			<d/>
			<d/>
			<e path="Void"/>
		</f>
		<meta><m n=":optional"/></meta>
		<haxe_doc>function(jqXHR:Dynamic, textStatus:Dynamic, errorThrown:Dynamic)</haxe_doc>
	</error>
	<dataType>
		<c path="String"/>
		<meta><m n=":optional"/></meta>
	</dataType>
	<data>
		<d/>
		<meta><m n=":optional"/></meta>
	</data>
	<complete>
		<f a="">
			<d/>
			<e path="Void"/>
		</f>
		<meta><m n=":optional"/></meta>
		<haxe_doc>function(arg:Dynamic)</haxe_doc>
	</complete>
	<cache>
		<e path="Bool"/>
		<meta><m n=":optional"/></meta>
	</cache>
	<async>
		<e path="Bool"/>
		<meta><m n=":optional"/></meta>
	</async>
</a></typedef>
	<class path="ui.jq.JQ" params="" file="haxe_src/ui/jq/JQ.hx" extern="1">
		<extends path="js.JQuery"/>
		<ui public="1" static="1"><d/></ui>
		<fn public="1" static="1"><d/></fn>
		<browser public="1" static="1"><d/></browser>
		<noop public="1" static="1"><f a=""><e path="Void"/></f></noop>
		<isNumeric public="1" set="method" static="1"><f a="val">
	<d/>
	<e path="Bool"/>
</f></isNumeric>
		<trim public="1" set="method" static="1"><f a="str">
	<c path="String"/>
	<c path="String"/>
</f></trim>
		<ajax public="1" set="method" static="1"><f a="ajaxOptions">
	<t path="ui.jq.AjaxOptions"/>
	<e path="Void"/>
</f></ajax>
		<getJSON public="1" set="method" static="1"><f a="url:?data:?success">
	<c path="String"/>
	<d/>
	<f a="::">
		<d/>
		<d/>
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></getJSON>
		<contains public="1" set="method" static="1"><f a="parent:child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Bool"/>
</f></contains>
		<widget public="1" set="method" static="1"><f a="qualifiedName:definition">
	<c path="String"/>
	<d/>
	<e path="Void"/>
</f></widget>
		<cur public="1" get="getCurrent" set="null" static="1">
			<c path="ui.jq.JQ"/>
			<haxe_doc>Return the current JQuery element (in a callback), similar to $(this) in JS.</haxe_doc>
		</cur>
		<curNoWrap public="1" get="getCurrent2" set="null" static="1"><t path="js.HtmlDom"/></curNoWrap>
		<getCurrent get="inline" set="null" line="178" static="1"><f a=""><c path="ui.jq.JQ"/></f></getCurrent>
		<getCurrent2 get="inline" set="null" line="181" static="1"><f a=""><t path="js.HtmlDom"/></f></getCurrent2>
		<map public="1" set="method"><f a="fcn">
	<f a=":">
		<c path="ui.jq.JQ"/>
		<c path="Int"/>
		<d/>
	</f>
	<e path="Void"/>
</f></map>
		<menu public="1" set="method"><f a="opts">
	<d/>
	<c path="ui.jq.JQ"/>
</f></menu>
		<zIndex public="1" set="method"><f a="zIndex">
	<c path="Int"/>
	<c path="ui.jq.JQ"/>
</f></zIndex>
		<propAttr public="1" set="method"><f a="name">
	<c path="String"/>
	<d/>
</f></propAttr>
		<val public="1" set="method" override="1"><f a=""><c path="String"/></f></val>
		<attr public="1" set="method" override="1"><f a="name">
	<c path="String"/>
	<c path="String"/>
</f></attr>
		<on public="1" set="method"><f a="events:?selector:?callb">
	<c path="String"/>
	<c path="String"/>
	<f a=":">
		<t path="js.JqEvent"/>
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></on>
		<mousedown public="1" set="method" override="1"><f a="?callb">
	<f a="">
		<t path="js.JqEvent"/>
		<e path="Void"/>
	</f>
	<c path="ui.jq.JQ"/>
</f></mousedown>
		<mouseout public="1" set="method" override="1"><f a="?callb">
	<f a="">
		<t path="js.JqEvent"/>
		<e path="Void"/>
	</f>
	<c path="ui.jq.JQ"/>
</f></mouseout>
		<mouseover public="1" set="method" override="1"><f a="?callb">
	<f a="">
		<t path="js.JqEvent"/>
		<e path="Void"/>
	</f>
	<c path="ui.jq.JQ"/>
</f></mouseover>
		<prependTo public="1" set="method" override="1"><f a="html">
	<c path="String"/>
	<c path="ui.jq.JQ"/>
</f></prependTo>
		<prepend public="1" set="method" override="1"><f a="html">
	<c path="String"/>
	<c path="ui.jq.JQ"/>
</f></prepend>
		<insertAfter public="1" set="method" override="1"><f a="html">
	<c path="String"/>
	<c path="ui.jq.JQ"/>
</f></insertAfter>
		<insertBefore public="1" set="method" override="1"><f a="html">
	<c path="String"/>
	<c path="ui.jq.JQ"/>
</f></insertBefore>
		<appendTo public="1" set="method" override="1"><f a="selector">
	<c path="String"/>
	<c path="ui.jq.JQ"/>
</f></appendTo>
		<addClass public="1" set="method" override="1"><f a="clazz">
	<c path="String"/>
	<c path="ui.jq.JQ"/>
</f></addClass>
		<hover public="1" set="method" override="1"><f a="onOver:?onOut">
	<f a="">
		<t path="js.JqEvent"/>
		<e path="Void"/>
	</f>
	<f a=""><e path="Void"/></f>
	<c path="ui.jq.JQ"/>
</f></hover>
		<find public="1" set="method" override="1"><f a="selector">
	<c path="String"/>
	<c path="ui.jq.JQ"/>
</f></find>
		<parent public="1" set="method" override="1"><f a="?selector">
	<c path="String"/>
	<c path="ui.jq.JQ"/>
</f></parent>
		<empty public="1" set="method" override="1"><f a=""><c path="ui.jq.JQ"/></f></empty>
		<click public="1" set="method" override="1"><f a="?callb">
	<f a="">
		<t path="js.JqEvent"/>
		<e path="Void"/>
	</f>
	<c path="ui.jq.JQ"/>
</f></click>
		<bind public="1" set="method" override="1"><f a="events:callb">
	<c path="String"/>
	<f a="">
		<t path="js.JqEvent"/>
		<e path="Void"/>
	</f>
	<c path="ui.jq.JQ"/>
</f></bind>
		<next public="1" set="method" override="1"><f a="?selector">
	<c path="String"/>
	<c path="ui.jq.JQ"/>
</f></next>
		<siblings public="1" set="method" override="1"><f a="?selector">
	<c path="String"/>
	<c path="ui.jq.JQ"/>
</f></siblings>
		<children public="1" set="method" override="1"><f a="?selector">
	<c path="String"/>
	<c path="ui.jq.JQ"/>
</f></children>
		<slider public="1" set="method"><f a="options">
	<d/>
	<c path="ui.jq.JQ"/>
</f></slider>
		<tabs public="1" set="method"><f a="?opts">
	<d/>
	<c path="ui.jq.JQ"/>
</f></tabs>
		<destroyContextMenu public="1" set="method"><f a=""><e path="Void"/></f></destroyContextMenu>
		<showContextMenu public="1" set="method"><f a="opts:callbak:positioningEvent">
	<d/>
	<f a="::">
		<c path="String"/>
		<c path="ui.jq.JQ"/>
		<d/>
		<e path="Void"/>
	</f>
	<t path="js.JqEvent"/>
	<c path="ui.jq.JQ"/>
</f></showContextMenu>
		<autocomplete public="1" set="method"><f a="opts">
	<d/>
	<c path="ui.jq.JQ"/>
</f></autocomplete>
		<helpToolTips public="1" set="method"><f a=""><c path="ui.jq.JQ"/></f></helpToolTips>
		<checkbox public="1" set="method"><f a="?opts">
	<d/>
	<c path="ui.jq.JQ"/>
</f></checkbox>
		<sortable public="1" set="method"><f a="?opts">
	<d/>
	<c path="ui.jq.JQSortable"/>
</f></sortable>
		<button public="1" set="method"><f a="?opts">
	<d/>
	<c path="ui.jq.JQ"/>
</f></button>
		<buttonsetv public="1" set="method"><f a="i">
	<c path="Int"/>
	<c path="ui.jq.JQ"/>
</f></buttonsetv>
		<tooltip public="1" set="method"><f a="?opts">
	<d/>
	<c path="ui.jq.JQ"/>
</f></tooltip>
		<accordion public="1" set="method"><f a="options">
	<d/>
	<c path="ui.jq.JQ"/>
</f></accordion>
		<editable public="1" set="method"><f a="fcn:options">
	<f a=":">
		<d/>
		<c path="Array"><d/></c>
		<d/>
	</f>
	<d/>
	<c path="ui.jq.JQ"/>
</f></editable>
		<width public="1" set="method" override="1"><f a=""><c path="Int"/></f></width>
		<index public="1" set="method" override="1"><f a="?selector">
	<c path="String"/>
	<c path="Int"/>
</f></index>
		<filter public="1" set="method" override="1"><f a="selector">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></filter>
		<css public="1" set="method" override="1"><f a="prop">
	<c path="String"/>
	<c path="String"/>
</f></css>
		<slideToggle public="1" set="method" override="1"><f a="?duration:?call">
	<c path="Int"/>
	<f a=""><e path="Void"/></f>
	<c path="ui.jq.JQ"/>
</f></slideToggle>
		<show public="1" set="method" override="1"><f a="?duration:?call">
	<c path="Int"/>
	<f a=""><e path="Void"/></f>
	<c path="ui.jq.JQ"/>
</f></show>
		<hide public="1" set="method" override="1"><f a="?duration:?call">
	<c path="Int"/>
	<f a=""><e path="Void"/></f>
	<c path="ui.jq.JQ"/>
</f></hide>
		<isVisible public="1" set="method"><f a=""><e path="Bool"/></f></isVisible>
		<fnDestroy public="1" set="method"><f a=""><e path="Void"/></f></fnDestroy>
		<destroy public="1" set="method"><f a=""><e path="Void"/></f></destroy>
		<hasAttr public="1" set="method"><f a="attr">
	<c path="String"/>
	<e path="Bool"/>
</f></hasAttr>
		<exists public="1" set="method"><f a=""><e path="Bool"/></f></exists>
	</class>
	<class path="ui.jq.JQSortable" params="" file="haxe_src/ui/jq/JQ.hx" module="ui.jq.JQ" extern="1">
		<extends path="ui.jq.JQ"/>
		<disableSelection public="1" set="method"><f a=""><e path="Void"/></f></disableSelection>
	</class>
	<class path="ui.jq.JDialog" params="" file="haxe_src/ui/jq/JQ.hx" module="ui.jq.JQ" extern="1">
		<extends path="ui.jq.JQ"/>
		<dialog public="1" set="method"><f a="cmd">
	<c path="String"/>
	<e path="Void"/>
</f></dialog>
	</class>
	<class path="ui.jq.JQDraggable" params="" file="haxe_src/ui/jq/JQ.hx" module="ui.jq.JQ" extern="1">
		<extends path="ui.jq.JQ"/>
		<draggable public="1" set="method"><f a="opts">
	<d/>
	<c path="ui.jq.JQDraggable"/>
</f></draggable>
	</class>
	<class path="ui.jq.JQDroppable" params="" file="haxe_src/ui/jq/JQ.hx" module="ui.jq.JQ" extern="1">
		<extends path="ui.jq.JQ"/>
		<droppable public="1" set="method"><f a="opts">
	<d/>
	<c path="ui.jq.JQDroppable"/>
</f></droppable>
	</class>
	<enum path="ui.log.LogLevel" params="" file="haxe_src/ui/log/LogLevel.hx">
		<WARN/>
		<TRACE/>
		<INFO/>
		<ERROR/>
		<DEBUG/>
	</enum>
	<class path="ui.log.Logga" params="" file="haxe_src/ui/log/Logga.hx">
		<getExceptionInst public="1" set="method" line="82" static="1"><f a="err">
	<d/>
	<c path="ui.exception.Exception"/>
</f></getExceptionInst>
		<error public="1" set="method" line="78"><f a="statement:?exception">
	<c path="String"/>
	<c path="ui.exception.Exception"/>
	<e path="Void"/>
</f></error>
		<warn public="1" set="method" line="75"><f a="statement:?exception">
	<c path="String"/>
	<c path="ui.exception.Exception"/>
	<e path="Void"/>
</f></warn>
		<info public="1" set="method" line="72"><f a="statement:?exception">
	<c path="String"/>
	<c path="ui.exception.Exception"/>
	<e path="Void"/>
</f></info>
		<debug public="1" set="method" line="69"><f a="statement:?exception">
	<c path="String"/>
	<c path="ui.exception.Exception"/>
	<e path="Void"/>
</f></debug>
		<trace public="1" set="method" line="66"><f a="statement:?exception">
	<c path="String"/>
	<c path="ui.exception.Exception"/>
	<e path="Void"/>
</f></trace>
		<setLogLevel public="1" set="method" line="63"><f a="logLevel">
	<e path="ui.log.LogLevel"/>
	<e path="Void"/>
</f></setLogLevel>
		<logsAtLevel public="1" set="method" line="60"><f a="level">
	<e path="ui.log.LogLevel"/>
	<e path="Bool"/>
</f></logsAtLevel>
		<log public="1" set="method" line="23"><f a="statement:?level:?exception">
	<c path="String"/>
	<e path="ui.log.LogLevel"/>
	<c path="ui.exception.Exception"/>
	<e path="Void"/>
</f></log>
		<_getLogger set="method" line="18"><f a=""><e path="Void"/></f></_getLogger>
		<initialized><e path="Bool"/></initialized>
		<console><d/></console>
		<loggerLevel><e path="ui.log.LogLevel"/></loggerLevel>
		<new public="1" set="method" line="14"><f a="logLevel">
	<e path="ui.log.LogLevel"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="ui.model.ModelObj" params="T" file="haxe_src/ui/model/ModelObj.hx">
		<implements path="haxe.rtti.Infos"/>
		<__rtti public="1" line="3" static="1"><c path="String"/></__rtti>
	</class>
	<class path="ui.model.User" params="" file="haxe_src/ui/model/ModelObj.hx" module="ui.model.ModelObj">
		<extends path="ui.model.ModelObj"><c path="ui.model.User"/></extends>
		<__rtti public="1" line="7" static="1"><c path="String"/></__rtti>
	</class>
	<class path="ui.model.Label" params="" file="haxe_src/ui/model/ModelObj.hx" module="ui.model.ModelObj">
		<extends path="ui.model.ModelObj"><c path="ui.model.Label"/></extends>
		<__rtti public="1" line="11" static="1"><c path="String"/></__rtti>
	</class>
	<class path="ui.model.Connection" params="" file="haxe_src/ui/model/ModelObj.hx" module="ui.model.ModelObj">
		<extends path="ui.model.ModelObj"><c path="ui.model.Connection"/></extends>
		<__rtti public="1" line="15" static="1"><c path="String"/></__rtti>
		<imgSrc public="1"><c path="String"/></imgSrc>
		<lname public="1"><c path="String"/></lname>
		<fname public="1"><c path="String"/></fname>
		<uid public="1"><c path="String"/></uid>
		<new public="1" set="method" line="21"><f a="?fname:?lname:?imgSrc">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="ui.observable.OSet" params="T" file="haxe_src/ui/observable/OSet.hx" interface="1">
		<delegate public="1" set="method"><f a=""><c path="Hash"><c path="ui.observable.OSet.T"/></c></f></delegate>
		<iterator public="1" set="method"><f a=""><t path="Iterator"><c path="ui.observable.OSet.T"/></t></f></iterator>
		<listen public="1" set="method"><f a="l">
	<f a=":">
		<c path="ui.observable.OSet.T"/>
		<c path="ui.observable.EventType"/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></listen>
		<identifier public="1" set="method"><f a=""><f a="">
	<c path="ui.observable.OSet.T"/>
	<c path="String"/>
</f></f></identifier>
	</class>
	<class path="ui.observable.EventManager" params="T" file="haxe_src/ui/observable/OSet.hx" module="ui.observable.OSet">
		<fire public="1" set="method" line="49"><f a="t:type">
	<c path="ui.observable.EventManager.T"/>
	<c path="ui.observable.EventType"/>
	<e path="Void"/>
</f></fire>
		<add public="1" set="method" line="41"><f a="l">
	<f a=":">
		<c path="ui.observable.EventManager.T"/>
		<c path="ui.observable.EventType"/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></add>
		<_set><c path="ui.observable.OSet"><c path="ui.observable.EventManager.T"/></c></_set>
		<_listeners><c path="Array"><f a=":">
	<c path="ui.observable.EventManager.T"/>
	<c path="ui.observable.EventType"/>
	<e path="Void"/>
</f></c></_listeners>
		<new public="1" set="method" line="37"><f a="set">
	<c path="ui.observable.OSet"><c path="ui.observable.EventManager.T"/></c>
	<e path="Void"/>
</f></new>
	</class>
	<class path="ui.observable.EventType" params="" file="haxe_src/ui/observable/OSet.hx" module="ui.observable.OSet">
		<Add public="1" line="61" static="1"><c path="ui.observable.EventType"/></Add>
		<Update public="1" line="62" static="1"><c path="ui.observable.EventType"/></Update>
		<Delete public="1" line="63" static="1"><c path="ui.observable.EventType"/></Delete>
		<isDelete public="1" set="method" line="91"><f a=""><e path="Bool"/></f></isDelete>
		<isAddOrUpdate public="1" set="method" line="87"><f a=""><e path="Bool"/></f></isAddOrUpdate>
		<isUpdate public="1" set="method" line="83"><f a=""><e path="Bool"/></f></isUpdate>
		<isAdd public="1" set="method" line="79"><f a=""><e path="Bool"/></f></isAdd>
		<name public="1" set="method" line="75"><f a=""><c path="String"/></f></name>
		<_update><e path="Bool"/></_update>
		<_add><e path="Bool"/></_add>
		<_name><c path="String"/></_name>
		<new set="method" line="69"><f a="name:add:update">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="ui.observable.AbstractSet" params="T" file="haxe_src/ui/observable/OSet.hx" module="ui.observable.OSet">
		<implements path="ui.observable.OSet"><c path="ui.observable.AbstractSet.T"/></implements>
		<delegate public="1" set="method" line="187"><f a=""><c path="Hash"><c path="ui.observable.AbstractSet.T"/></c></f></delegate>
		<iterator public="1" set="method" line="183"><f a=""><t path="Iterator"><c path="ui.observable.AbstractSet.T"/></t></f></iterator>
		<identifier public="1" set="method" line="179"><f a=""><f a="">
	<c path="ui.observable.AbstractSet.T"/>
	<c path="String"/>
</f></f></identifier>
		<fire set="method" line="175"><f a="t:type">
	<c path="ui.observable.AbstractSet.T"/>
	<c path="ui.observable.EventType"/>
	<e path="Void"/>
</f></fire>
		<map public="1" params="U" set="method" line="171"><f a="f">
	<f a="">
		<c path="ui.observable.AbstractSet.T"/>
		<c path="map.U"/>
	</f>
	<c path="ui.observable.OSet"><c path="map.U"/></c>
</f></map>
		<filter public="1" set="method" line="167"><f a="f">
	<f a="">
		<c path="ui.observable.AbstractSet.T"/>
		<e path="Bool"/>
	</f>
	<c path="ui.observable.OSet"><c path="ui.observable.AbstractSet.T"/></c>
</f></filter>
		<listen public="1" set="method" line="163"><f a="l">
	<f a=":">
		<c path="ui.observable.AbstractSet.T"/>
		<c path="ui.observable.EventType"/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></listen>
		<_eventManager><c path="ui.observable.EventManager"><c path="ui.observable.AbstractSet.T"/></c></_eventManager>
		<new public="1" set="method" line="159"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="ui.observable.ObservableSet" params="T" file="haxe_src/ui/observable/OSet.hx" module="ui.observable.OSet">
		<extends path="ui.observable.AbstractSet"><c path="ui.observable.ObservableSet.T"/></extends>
		<identifier public="1" set="method" line="149" override="1"><f a=""><f a="">
	<c path="ui.observable.ObservableSet.T"/>
	<c path="String"/>
</f></f></identifier>
		<delete public="1" set="method" line="141"><f a="t">
	<c path="ui.observable.ObservableSet.T"/>
	<e path="Void"/>
</f></delete>
		<update public="1" set="method" line="137"><f a="t">
	<c path="ui.observable.ObservableSet.T"/>
	<e path="Void"/>
</f></update>
		<delegate public="1" set="method" line="133" override="1"><f a=""><c path="Hash"><c path="ui.observable.ObservableSet.T"/></c></f></delegate>
		<addOrUpdate public="1" set="method" line="121"><f a="t">
	<c path="ui.observable.ObservableSet.T"/>
	<e path="Void"/>
</f></addOrUpdate>
		<isEmpty public="1" set="method" line="117"><f a=""><e path="Bool"/></f></isEmpty>
		<iterator public="1" set="method" line="113" override="1"><f a=""><t path="Iterator"><c path="ui.observable.ObservableSet.T"/></t></f></iterator>
		<add public="1" set="method" line="109"><f a="t">
	<c path="ui.observable.ObservableSet.T"/>
	<e path="Void"/>
</f></add>
		<_identifier><f a="">
	<c path="ui.observable.ObservableSet.T"/>
	<c path="String"/>
</f></_identifier>
		<_delegate><c path="Hash"><c path="ui.observable.ObservableSet.T"/></c></_delegate>
		<new public="1" set="method" line="103"><f a="identifier">
	<f a="">
		<c path="ui.observable.ObservableSet.T"/>
		<c path="String"/>
	</f>
	<e path="Void"/>
</f></new>
	</class>
	<class path="ui.observable.MappedSet" params="T:U" file="haxe_src/ui/observable/OSet.hx" module="ui.observable.OSet">
		<extends path="ui.observable.AbstractSet"><c path="ui.observable.MappedSet.U"/></extends>
		<iterator public="1" set="method" line="237" override="1"><f a=""><t path="Iterator"><c path="ui.observable.MappedSet.U"/></t></f></iterator>
		<identify set="method" line="226"><f a="u">
	<c path="ui.observable.MappedSet.U"/>
	<c path="String"/>
</f></identify>
		<delegate public="1" set="method" line="222" override="1"><f a=""><c path="Hash"><c path="ui.observable.MappedSet.U"/></c></f></delegate>
		<identifier public="1" set="method" line="218" override="1"><f a=""><f a="">
	<c path="ui.observable.MappedSet.U"/>
	<c path="String"/>
</f></f></identifier>
		<_mappedSet><c path="Hash"><c path="ui.observable.MappedSet.U"/></c></_mappedSet>
		<_mapper><f a="">
	<c path="ui.observable.MappedSet.T"/>
	<c path="ui.observable.MappedSet.U"/>
</f></_mapper>
		<_source><c path="ui.observable.OSet"><c path="ui.observable.MappedSet.T"/></c></_source>
		<new public="1" set="method" line="200"><f a="source:mapper">
	<c path="ui.observable.OSet"><c path="ui.observable.MappedSet.T"/></c>
	<f a="">
		<c path="ui.observable.MappedSet.T"/>
		<c path="ui.observable.MappedSet.U"/>
	</f>
	<e path="Void"/>
</f></new>
	</class>
	<class path="ui.observable.FilteredSet" params="T" file="haxe_src/ui/observable/OSet.hx" module="ui.observable.OSet">
		<extends path="ui.observable.AbstractSet"><c path="ui.observable.FilteredSet.T"/></extends>
		<iterator public="1" set="method" line="301" override="1"><f a=""><t path="Iterator"><c path="ui.observable.FilteredSet.T"/></t></f></iterator>
		<identifier public="1" set="method" line="297" override="1"><f a=""><f a="">
	<c path="ui.observable.FilteredSet.T"/>
	<c path="String"/>
</f></f></identifier>
		<refilter public="1" set="method" line="293"><f a=""><e path="Void"/></f></refilter>
		<apply set="method" line="276"><f a="t">
	<c path="ui.observable.FilteredSet.T"/>
	<e path="Void"/>
</f></apply>
		<delegate public="1" set="method" line="272" override="1"><f a=""><c path="Hash"><c path="ui.observable.FilteredSet.T"/></c></f></delegate>
		<_identifier><f a="">
	<c path="ui.observable.FilteredSet.T"/>
	<c path="String"/>
</f></_identifier>
		<_filter><f a="">
	<c path="ui.observable.FilteredSet.T"/>
	<e path="Bool"/>
</f></_filter>
		<_source><c path="ui.observable.OSet"><c path="ui.observable.FilteredSet.T"/></c></_source>
		<_filteredSet><c path="Hash"><c path="ui.observable.FilteredSet.T"/></c></_filteredSet>
		<new public="1" set="method" line="251"><f a="source:filter">
	<c path="ui.observable.OSet"><c path="ui.observable.FilteredSet.T"/></c>
	<f a="">
		<c path="ui.observable.FilteredSet.T"/>
		<e path="Bool"/>
	</f>
	<e path="Void"/>
</f></new>
	</class>
	<class path="ui.observable.GroupedSet" params="T" file="haxe_src/ui/observable/OSet.hx" module="ui.observable.OSet">
		<extends path="ui.observable.AbstractSet"><c path="ui.observable.OSet"><c path="ui.observable.GroupedSet.T"/></c></extends>
		<delegate public="1" set="method" line="396" override="1"><f a=""><c path="Hash"><c path="ui.observable.OSet"><c path="ui.observable.GroupedSet.T"/></c></c></f></delegate>
		<iterator public="1" set="method" line="392" override="1"><f a=""><t path="Iterator"><c path="ui.observable.OSet"><c path="ui.observable.GroupedSet.T"/></c></t></f></iterator>
		<identify set="method" line="381"><f a="set">
	<c path="ui.observable.OSet"><c path="ui.observable.GroupedSet.T"/></c>
	<c path="String"/>
</f></identify>
		<identifier public="1" set="method" line="377" override="1"><f a=""><f a="">
	<c path="ui.observable.OSet"><c path="ui.observable.GroupedSet.T"/></c>
	<c path="String"/>
</f></f></identifier>
		<add set="method" line="357"><f a="t">
	<c path="ui.observable.GroupedSet.T"/>
	<e path="Void"/>
</f></add>
		<delete set="method" line="335"><f a="t">
	<c path="ui.observable.GroupedSet.T"/>
	<e path="Void"/>
</f></delete>
		<_identityToGrouping><c path="Hash"><c path="String"/></c></_identityToGrouping>
		<_groupedSets><c path="Hash"><c path="ui.observable.ObservableSet"><c path="ui.observable.GroupedSet.T"/></c></c></_groupedSets>
		<_groupingFn><f a="">
	<c path="ui.observable.GroupedSet.T"/>
	<c path="String"/>
</f></_groupingFn>
		<_source><c path="ui.observable.OSet"><c path="ui.observable.GroupedSet.T"/></c></_source>
		<new public="1" set="method" line="314"><f a="source:groupingFn">
	<c path="ui.observable.OSet"><c path="ui.observable.GroupedSet.T"/></c>
	<f a="">
		<c path="ui.observable.GroupedSet.T"/>
		<c path="String"/>
	</f>
	<e path="Void"/>
</f></new>
	</class>
	<class path="ui.observable.SortedSet" params="T" file="haxe_src/ui/observable/OSet.hx" module="ui.observable.OSet">
		<extends path="ui.observable.AbstractSet"><c path="ui.observable.SortedSet.T"/></extends>
		<delegate public="1" set="method" line="499" override="1"><f a=""><c path="Hash"><c path="ui.observable.SortedSet.T"/></c></f></delegate>
		<iterator public="1" set="method" line="495" override="1"><f a=""><t path="Iterator"><c path="ui.observable.SortedSet.T"/></t></f></iterator>
		<identifier public="1" set="method" line="491" override="1"><f a=""><f a="">
	<c path="ui.observable.SortedSet.T"/>
	<c path="String"/>
</f></f></identifier>
		<add set="method" line="485"><f a="t">
	<c path="ui.observable.SortedSet.T"/>
	<e path="Void"/>
</f></add>
		<delete set="method" line="481"><f a="t">
	<c path="ui.observable.SortedSet.T"/>
	<e path="Void"/>
</f></delete>
		<binarySearch set="method" line="463"><f a="value:sortBy:startIndex:endIndex">
	<c path="ui.observable.SortedSet.T"/>
	<c path="String"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></binarySearch>
		<indexOf set="method" line="458"><f a="t">
	<c path="ui.observable.SortedSet.T"/>
	<c path="Int"/>
</f></indexOf>
		<sorted set="method" line="450"><f a=""><c path="Array"><c path="ui.observable.SortedSet.T"/></c></f></sorted>
		<_comparisonFn><f a=":">
	<c path="ui.observable.SortedSet.T"/>
	<c path="ui.observable.SortedSet.T"/>
	<c path="Int"/>
</f></_comparisonFn>
		<_dirty><e path="Bool"/></_dirty>
		<_sorted><c path="Array"><c path="ui.observable.SortedSet.T"/></c></_sorted>
		<_sortByFn><f a="">
	<c path="ui.observable.SortedSet.T"/>
	<c path="String"/>
</f></_sortByFn>
		<_source><c path="ui.observable.OSet"><c path="ui.observable.SortedSet.T"/></c></_source>
		<new public="1" set="method" line="411"><f a="source:?sortByFn">
	<c path="ui.observable.OSet"><c path="ui.observable.SortedSet.T"/></c>
	<f a="">
		<c path="ui.observable.SortedSet.T"/>
		<c path="String"/>
	</f>
	<e path="Void"/>
</f></new>
	</class>
	<class path="ui.util.M" params="" file="haxe_src/ui/util/M.hx">
		<makeSafeGetExpression params="T" set="method" line="28" static="1">
			<f a="e:?default0:pos">
				<t path="haxe.macro.ExprOf"><c path="makeSafeGetExpression.T"/></t>
				<t path="haxe.macro.ExprOf"><c path="makeSafeGetExpression.T"/></t>
				<t path="haxe.macro.Position"/>
				<t path="haxe.macro.ExprOf"><c path="makeSafeGetExpression.T"/></t>
			</f>
			<haxe_doc>takes e and default0 and wraps it as follows

  		try { 
  		  e; 
  		} catch ( __e: Dynamic ) {
	      default0;
  		}</haxe_doc>
		</makeSafeGetExpression>
		<exprBlock set="method" line="38" static="1"><f a="exprDefs:pos">
	<c path="Array"><e path="haxe.macro.ExprDef"/></c>
	<t path="haxe.macro.Position"/>
	<t path="haxe.macro.Expr"/>
</f></exprBlock>
		<expr set="method" line="41" static="1"><f a="exprDef:pos">
	<e path="haxe.macro.ExprDef"/>
	<t path="haxe.macro.Position"/>
	<t path="haxe.macro.Expr"/>
</f></expr>
		<exprs set="method" line="44" static="1"><f a="exprDefs:pos">
	<c path="Array"><e path="haxe.macro.ExprDef"/></c>
	<t path="haxe.macro.Position"/>
	<c path="Array"><t path="haxe.macro.Expr"/></c>
</f></exprs>
	</class>
	<class path="ui.util.UidGenerator" params="" file="haxe_src/ui/util/UidGenerator.hx">
		<chars line="7" static="1"><c path="String"/></chars>
		<create public="1" set="method" line="9" static="1"><f a="?length">
	<c path="Int"/>
	<c path="String"/>
</f></create>
		<isLetter public="1" set="method" line="33" static="1"><f a="char">
	<c path="String"/>
	<e path="Bool"/>
</f></isLetter>
		<randomNum public="1" set="method" line="42" static="1"><f a=""><c path="Int"/></f></randomNum>
	</class>
	<typedef path="ui.widget.ConnectionCompOptions" params="" file="haxe_src/ui/widget/ConnectionComp.hx" module="ui.widget.ConnectionComp"><a>
	<connection><c path="ui.model.Connection"/></connection>
	<classes>
		<c path="String"/>
		<meta><m n=":optional"/></meta>
	</classes>
</a></typedef>
	<typedef path="ui.widget.ConnectionCompWidgetDef" params="" file="haxe_src/ui/widget/ConnectionComp.hx" module="ui.widget.ConnectionComp"><a>
	<update><f a=""><e path="Void"/></f></update>
	<options><t path="ui.widget.ConnectionCompOptions"/></options>
	<destroy><f a=""><e path="Void"/></f></destroy>
	<_create><f a=""><e path="Void"/></f></_create>
</a></typedef>
	<class path="ui.widget.ConnectionComp" params="" file="haxe_src/ui/widget/ConnectionComp.hx" extern="1">
		<extends path="ui.jq.JQ"/>
		<connectionComp public="1" set="method"><f a="opts">
	<t path="ui.widget.ConnectionCompOptions"/>
	<c path="ui.widget.ConnectionComp"/>
</f></connectionComp>
	</class>
	<typedef path="ui.widget.ConnectionsCompOptions" params="" file="haxe_src/ui/widget/ConnectionsComp.hx" module="ui.widget.ConnectionsComp"><a>
	<itemsClass>
		<c path="String"/>
		<meta><m n=":optional"/></meta>
	</itemsClass>
	<connections><c path="ui.observable.ObservableSet"><c path="ui.model.Connection"/></c></connections>
</a></typedef>
	<typedef path="ui.widget.ConnectionsCompWidgetDef" params="" file="haxe_src/ui/widget/ConnectionsComp.hx" module="ui.widget.ConnectionsComp"><a>
	<options><t path="ui.widget.ConnectionsCompOptions"/></options>
	<destroy><f a=""><e path="Void"/></f></destroy>
	<connections>
		<c path="ui.observable.MappedSet">
			<c path="ui.model.Connection"/>
			<c path="ui.widget.ConnectionComp"/>
		</c>
		<meta><m n=":optional"/></meta>
	</connections>
	<_create><f a=""><e path="Void"/></f></_create>
</a></typedef>
	<class path="ui.widget.ConnectionsComp" params="" file="haxe_src/ui/widget/ConnectionsComp.hx" extern="1">
		<extends path="ui.jq.JQ"/>
		<connectionsComp public="1" set="method"><f a="opts">
	<t path="ui.widget.ConnectionsCompOptions"/>
	<c path="ui.widget.ConnectionsComp"/>
</f></connectionsComp>
	</class>
	<class path="ui.widget.Widgets" params="" file="haxe_src/ui/widget/Widgets.hx">
		<getSelf public="1" params="T" get="inline" set="null" line="7" static="1"><f a=""><c path="getSelf.T"/></f></getSelf>
		<getSelfElement public="1" params="T" get="inline" set="null" line="11" static="1"><f a=""><c path="getSelfElement.T"/></f></getSelfElement>
	</class>
</haxe>